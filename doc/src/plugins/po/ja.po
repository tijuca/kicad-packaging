msgid ""
msgstr ""
"Project-Id-Version: kicad\n"
"POT-Creation-Date: 2016-11-21 16:20+0200\n"
"PO-Revision-Date: 2017-02-13 02:26+0900\n"
"Last-Translator: starfort_jp <starfort@nifty.com>\n"
"Language-Team: kicad_jp <kicad@kicad.jp>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.8.11\n"

#. type: Title =
#: plugins.adoc:6
#, no-wrap
msgid "Kicad Plugins"
msgstr "KiCad プラグイン"

#. type: Plain text
#: plugins.adoc:9
msgid "_KiCad Plugin System_"
msgstr "_KiCad プラグイン システム_"

#. type: Plain text
#: plugins.adoc:12
#, no-wrap
msgid "*Copyright*\n"
msgstr "*著作権*\n"

#. type: Plain text
#: plugins.adoc:18
msgid ""
"This document is Copyright (C) 2016 by it's contributors as listed below.  You may "
"distribute it and/or modify it under the terms of either the GNU General Public "
"License (http://www.gnu.org/licenses/gpl.html), version 3 or later, or the "
"Creative Commons Attribution License (http://creativecommons.org/licenses/"
"by/3.0/), version 3.0 or later."
msgstr ""
"このドキュメントは以下の貢献者により著作権所有 (C) 2016 されています。あなたは、"
"GNU General Public License ( http://www.gnu.org/licenses/gpl.html ) のバージョン 3 "
"以降、あるいはクリエイティブ・コモンズ・ライセンス ( http://creativecommons.org/"
"licenses/by/3.0/ ) のバージョン 3.0 以降のいずれかの条件の下で、配布または変更する"
"ことができます。"

#. type: Plain text
#: plugins.adoc:20
msgid "All trademarks within this guide belong to their legitimate owners."
msgstr "このガイドの中のすべての商標は、正当な所有者に帰属します。"

#. type: Plain text
#: plugins.adoc:23
#, no-wrap
msgid "*Contributors*\n"
msgstr "*貢献者*\n"

#. type: Plain text
#: plugins.adoc:25
msgid "Cirilo Bernardo"
msgstr "Cirilo Bernardo"

#. type: Plain text
#: plugins.adoc:28
#, no-wrap
msgid "*Feedback*\n"
msgstr "*フィードバック*\n"

#. type: Plain text
#: plugins.adoc:30
msgid "Please direct any bug reports, suggestions or new versions to here:"
msgstr "バグ報告や提案はこちらへお知らせください:"

#. type: Plain text
#: plugins.adoc:32
msgid "About KiCad document: https://github.com/KiCad/kicad-doc/issues"
msgstr "KiCad のドキュメントについて : https://github.com/KiCad/kicad-doc/issues"

#. type: Plain text
#: plugins.adoc:34
msgid "About KiCad software: https://bugs.launchpad.net/kicad"
msgstr "KiCad ソフトウェアについて : https://bugs.launchpad.net/kicad"

#. type: Plain text
#: plugins.adoc:36
msgid "About KiCad software i18n: https://github.com/KiCad/kicad-i18n/issues"
msgstr ""
"KiCad ソフトウェアの国際化について : https://github.com/KiCad/kicad-i18n/issues"

#. type: Plain text
#: plugins.adoc:40
#, no-wrap
msgid "*Publication date and software version*\n"
msgstr "*発行日とソフトウエアのバージョン*\n"

#. type: Plain text
#: plugins.adoc:42
msgid "Published on January 29, 2016."
msgstr "2016年1月29日 発行"

#. type: Plain text
#: plugins.adoc:44
msgid "<<<<"
msgstr "<<<<"

#. type: Title ==
#: plugins.adoc:45
#, no-wrap
msgid "Introduction to the KiCad plugin system"
msgstr "KiCad プラグイン システム について"

#. type: Plain text
#: plugins.adoc:56
msgid ""
"The KiCad plugin system is a framework for extending the capabilities of KiCad "
"using shared libraries. One of the main advantages of using a plugin is that it is "
"not necessary to rebuild the KiCad suite while developing a plugin; in fact, "
"plugins can be built with the aid of a very small set of headers from the KiCad "
"source tree. Removing the requirement to build KiCad during plugin development "
"greatly increases productivity by ensuring that the developer only compiles code "
"directly related to the plugin which is being developed and thus reducing the time "
"required for each build and test cycle."
msgstr ""
"KiCad プラグイン システムは、共有ライブラリを用いた KiCad の機能を拡張するためのフ"
"レームワークです。プラグインを使用する主な利点の一つは、プラグイン開発中に KiCad "
"パッケージ一式を再構築する必要がないということです。実際、プラグインは、KiCad ソー"
"ス ツリーにあるヘッダのごく小さなセットを使ってビルドすることができます。開発者が直"
"接プラグインに関するコードをコンパイルするだけで済むことが保証されると、その結果と"
"して各ビルトとテストのサイクルに必要な時間を減らすことができるので、プラグイン開発"
"において KiCad をビルドする必要をなくすということは、生産性を大きく向上させることに"
"なります。"

#. type: Plain text
#: plugins.adoc:65
msgid ""
"Plugins were initially developed for the 3D model viewer to make it possible to "
"support more types of 3D models without requiring major changes to the KiCad "
"source for each new model type supported. The plugin framework was later "
"generalized so that in the future developers can create different classes of "
"plugins.  Currently only 3D plugins are implemented within KiCad but it is "
"envisioned that a PCB plugin will eventually be developed to make it possible for "
"users to implement data Importers and Exporters."
msgstr ""
"新しいモデル形式に対して KiCad ソースのメジャーな変更を伴うことなく、より多くの3D "
"モデル形式をサポートする目的で、プラグインは当初、3D モデル ビューア用に開発されま"
"した。プラグイン フレームワークは、将来の開発者がプラグインの異なったクラスを作成で"
"きるよう、後に一般化されたものです。今のところ、KiCad では 3D プラグインのみ実装さ"
"れていますが、将来的にはデータのインポートとエクスポートをユーザーによって実装でき"
"るようにするための PCB プラグインが開発される見通しです。"

#. type: Title ===
#: plugins.adoc:68
#, no-wrap
msgid "Plugin Classes"
msgstr "プラグインのクラス"

#. type: Plain text
#: plugins.adoc:79
msgid ""
"Plugins are divided into Plugin Classes since each plugin addresses problems in a "
"specific domain and therefore requires an interface unique to that domain. For "
"example, the 3D model plugins load 3D model data from files and translate that "
"data into a format which can be displayed by the 3D viewer. A PCB Import/Export "
"plugin would take PCB data and export to other electrical or mechanical data "
"formats, or translate a foreign format into a KiCad PCB. At the moment only the 3D "
"Plugin Class has been developed and it will be the focus of this document."
msgstr ""
"各プラグインはそれぞれ特定領域に関する問題を処理するので、その領域毎に別々のイン"
"ターフェイスが必要となります。このため、プラグインはプラグイン クラスへと分類されま"
"す。例えば、3D モデル プラグインはファイルから 3D モデル データを読み込んで、3D "
"ビューアで表示できるようなフォーマットへとデータを変換します。PCB インポート/エクス"
"ポート プラグインは PCB のデータを受け取って別の電気的あるいは機械的なデータ フォー"
"マットへとエクスポートしたり、外部フォーマットを KiCad PCB 形式に変換したりします。"
"現時点では、3D プラグイン クラスのみ開発されており、本文書でも集中して取り上げてい"
"きます。"

#. type: Plain text
#: plugins.adoc:97
msgid ""
"Implementing a Plugin Class requires creating code within the KiCad source tree "
"which manages the loading of plugin code. Within the KiCad source tree, the file "
"`plugins/ldr/pluginldr.h` declares the base class for all plugin loaders.  This "
"class declares the most basic functions which we would expect to find in any KiCad "
"plugin (boilerplate code) and its implementation provides basic checks on version "
"compatibility between the plugin loader and the available plugins. The header "
"`plugins/ldr/3d/pluginldr3D.h` declares a loader for the 3D Plugin Class. The "
"loader is responsible for loading a given plugin and making its functions "
"available to KiCad.  Each instance of a plugin loader represents an actual plugin "
"implementation and acts as a transparent bridge between KiCad and the plugin's "
"features. The loader is not the only code required within KiCad to support "
"plugins: we also need code to discover the plugins and code to invoke the "
"functions of the plugins via the plugin loader.  In the case of the 3D plugins the "
"discovery and invocation functions are all contained within the S3D_CACHE class."
msgstr ""
"プラグイン クラスを実装するには、KiCad ソース ツリー内でプラグインの読み込み管理を"
"行うコードを作成することが必要です。全てのプラグイン ローダーに対する基本クラスは、"
"KiCad ソース ツリー内のファイル `plugins/ldr/pluginldr.h` で宣言されています。この"
"クラスは、あらゆる KiCad プラグインで見つかるであろう(お約束のコードである)最も基本"
"的な関数を宣言しており、プラグイン ローダーと利用可能なプラグイン間のバージョン互換"
"について最低限のチェックを行う機能を持っています。ヘッダ `plugins/ldr/3d/"
"pluginldr3D.h` には、3D プラグイン クラスのためのローダーが宣言されています。ロー"
"ダーは与えられたプラグインの読み込みを担当し、プラグインが持っている関数を KiCad で"
"利用可能にします。各プラグイン ローダーのインスタンスはプラグイン実装の実体であり、"
"KiCad とプラグインの関数を透過的に橋渡しするよう振舞います。プラグインをサポートす"
"るために KiCad 内部で必要とされるコードはローダーだけではありません: プラグインを見"
"つけるためのコード、プラグイン ローダー経由でプラグインの関数を呼び出すコードも必要"
"です。3D プラグインの場合、この発見と呼び出しの関数は S3D_CACHE クラス内に全て含ま"
"れています。"

#. type: Plain text
#: plugins.adoc:102
msgid ""
"Plugin developers do not need to be concerned with the details of KiCad's internal "
"code for managing plugins unless a new Plugin Class is being developed; a plugin "
"only needs to define the functions declared by their specific plugin class."
msgstr ""
"新規のプラグイン クラスを開発する場合以外、プラグインの開発者はプラグイン管理に関す"
"る KiCad 内部コードの詳細を知る必要はありません; プラグインに自身が属するプラグイ"
"ン クラスで宣言されている関数を定義していくだけで済みます。"

#. type: Plain text
#: plugins.adoc:110
msgid ""
"The header `include/plugins/kicad_plugin.h` declares the generic functions "
"required of all KiCad plugins; these functions identify the Plugin Class, provide "
"the name of the specific plugin, provide version information for the Plugin Class "
"API, provide version information for the specific plugin, and provide a basic "
"version compatibility check on the Plugin Class API. In brief, these functions are:"
msgstr ""
"ヘッダ `include/plugins/kicad_plugin.h` には、全ての KiCad プラグインで必要とされる"
"ジェネリック関数が宣言されています; これらの関数は、プラグイン クラスを識別し、固有"
"のプラグイン名、プラグイン クラス API に関するバージョン情報、固有のプラグインに関"
"するバージョン情報、プラグイン クラス API 上での最低限のバージョン互換チェック機能"
"を提供します。以下は、これらの関数についての要約です:"

#. type: delimited block -
#: plugins.adoc:115
#, no-wrap
msgid ""
"/* Return a UTF-8 string naming the Plugin Class */\n"
"char const* GetKicadPluginClass( void );\n"
msgstr ""
"/* プラグイン クラス名を UTF-8 文字列で返す */\n"
"char const* GetKicadPluginClass( void );\n"

#. type: delimited block -
#: plugins.adoc:119
#, no-wrap
msgid ""
"/* Return version information for the Plugin Class API */\n"
"void GetClassVersion( unsigned char* Major, unsigned char* Minor,\n"
"     unsigned char* Patch, unsigned char* Revision );\n"
msgstr ""
"/* プラグイン クラス API に関するバージョン情報を返す */\n"
"void GetClassVersion( unsigned char* Major, unsigned char* Minor,\n"
"     unsigned char* Patch, unsigned char* Revision );\n"

#. type: delimited block -
#: plugins.adoc:126
#, no-wrap
msgid ""
"/*\n"
"   Return true if the version check implemented in the plugin\n"
"   determines that the given Plugin Class API is compatible.\n"
" */\n"
"bool CheckClassVersion( unsigned char Major,\n"
"    unsigned char Minor, unsigned char Patch, unsigned char Revision );\n"
msgstr ""
"/*\n"
"   プラグインに実装されたバージョンチェックが与えられた\n"
"   プラグイン クラス API との互換性を確認できた場合、true を返す\n"
" */\n"
"bool CheckClassVersion( unsigned char Major,\n"
"    unsigned char Minor, unsigned char Patch, unsigned char Revision );\n"

#. type: delimited block -
#: plugins.adoc:129
#, no-wrap
msgid ""
"/* Return the name of the specific plugin, for example \"PLUGIN_3D_VRML\" */\n"
"const char* GetKicadPluginName( void );\n"
msgstr ""
"/* 固有のプラグイン名を返す、(例) \"PLUGIN_3D_VRML\" */\n"
"const char* GetKicadPluginName( void );\n"

#. type: delimited block -
#: plugins.adoc:133
#, no-wrap
msgid ""
"/* Return version information for the specific plugin */\n"
"void GetPluginVersion( unsigned char* Major, unsigned char* Minor,\n"
"     unsigned char* Patch, unsigned char* Revision );\n"
msgstr ""
"/* 固有のプラグインに関するバージョン情報を返す */\n"
"void GetPluginVersion( unsigned char* Major, unsigned char* Minor,\n"
"     unsigned char* Patch, unsigned char* Revision );\n"

#. type: Title ====
#: plugins.adoc:137
#, no-wrap
msgid "Plugin Class: PLUGIN_3D"
msgstr "プラグイン クラス: PLUGIN_3D"

#. type: Plain text
#: plugins.adoc:144
msgid ""
"The header `include/plugins/3d/3d_plugin.h` declares the functions which must be "
"implemented by all 3D plugins and defines a number of functions which are required "
"by the plugin and which the user must not reimplement. The defined functions which "
"the user must not reimplement are:"
msgstr ""
"ヘッダ `include/plugins/3d/3d_plugin.h` には、全ての 3D プラグインで実装されなけれ"
"ばならない関数が宣言されており、プラグインにとって必要な及びユーザーが再実装する必"
"要がない幾つかの関数が定義されています。ユーザーが再実装する必要がない定義済み関数"
"は以下のとおりです:"

#. type: delimited block -
#: plugins.adoc:149
#, no-wrap
msgid ""
"/* Returns the Plugin Class name \"PLUGIN_3D\" */\n"
"char const* GetKicadPluginClass( void );\n"
msgstr ""
"/* プラグイン クラス名 \"PLUGIN_3D\" を返す */\n"
"char const* GetKicadPluginClass( void );\n"

#. type: delimited block -
#: plugins.adoc:153
#, no-wrap
msgid ""
"/* Return version information for the PLUGIN_3D API */\n"
"void GetClassVersion( unsigned char* Major, unsigned char* Minor,\n"
"     unsigned char* Patch, unsigned char* Revision );\n"
msgstr ""
"/* PLUGIN_3D API に関するバージョン情報を返す */\n"
"void GetClassVersion( unsigned char* Major, unsigned char* Minor,\n"
"     unsigned char* Patch, unsigned char* Revision );\n"

#. type: delimited block -
#: plugins.adoc:161
#, no-wrap
msgid ""
"/*\n"
"   Performs basic version checks enforced by the developers of\n"
"   the loader for the PLUGIN_3D class and returns true if the\n"
"   checks pass\n"
" */\n"
"bool CheckClassVersion( unsigned char Major, unsigned char Minor,\n"
"     unsigned char Patch, unsigned char Revision );\n"
msgstr ""
"/*\n"
"   PLUGIN_3D クラスに関し、ローダーの開発者による強制的な\n"
"   最低限のバージョンチェックを行なう。チェックにパスした場合、\n"
"   true を返す\n"
" */\n"
"bool CheckClassVersion( unsigned char Major, unsigned char Minor,\n"
"     unsigned char Patch, unsigned char Revision );\n"

#. type: Plain text
#: plugins.adoc:164
msgid "The functions which the user must implement are as follows:"
msgstr "ユーザーが実装しなければならない関数は次のとおりです:"

#. type: delimited block -
#: plugins.adoc:168
#, no-wrap
msgid ""
"/* Return the number of extension strings supported by the plugin */\n"
"int GetNExtensions( void );\n"
msgstr ""
"/* プラグインでサポートされている拡張子文字列の数を返す */\n"
"int GetNExtensions( void );\n"

#. type: delimited block -
#: plugins.adoc:174
#, no-wrap
msgid ""
"/*\n"
"   Return the requested extension string; valid values are 0 to\n"
"   GetNExtensions() - 1\n"
" */\n"
"char const* GetModelExtension( int aIndex );\n"
msgstr ""
"/*\n"
"   要求された拡張子の文字列を返す; 有効な値は 0 から\n"
"   GetNExtensions() - 1\n"
" */\n"
"char const* GetModelExtension( int aIndex );\n"

#. type: delimited block -
#: plugins.adoc:177
#, no-wrap
msgid ""
"/* Return the total number of file filters supported by the plugin */\n"
"int GetNFilters( void );\n"
msgstr ""
"/* プラグインでサポートされているファイル フィルタの合計数を返す */\n"
"int GetNFilters( void );\n"

#. type: delimited block -
#: plugins.adoc:183
#, no-wrap
msgid ""
"/*\n"
"   Return the file filter requested; valid values are 0 to\n"
"   GetNFilters() - 1\n"
" */\n"
"char const* GetFileFilter( int aIndex );\n"
msgstr ""
"/*\n"
"   要求されたファイル フィルタを返す; 有効な値は 0 から\n"
"   GetNFilters() - 1\n"
" */\n"
"char const* GetFileFilter( int aIndex );\n"

#. type: delimited block -
#: plugins.adoc:190
#, no-wrap
msgid ""
"/*\n"
"    Return true if the plugin can render this type of 3D model.\n"
"    In some cases a plugin may not yet provide a visual model\n"
"    and must return false.\n"
" */\n"
"bool CanRender( void );\n"
msgstr ""
"/*\n"
"    この 3D モデル タイプをレンダリングできる場合、true を返す\n"
"    プラグインがビジュアル モードを提供しないことがあるかも知れないが、その場合は \n"
"    false を返さなければならない \n"
" */\n"
"bool CanRender( void );\n"

#. type: delimited block -
#: plugins.adoc:193
#, no-wrap
msgid ""
"/* Load the specified model and return a pointer to its visual model data */\n"
"SCENEGRAPH* Load( char const* aFileName );\n"
msgstr ""
"/* 指定されたモデルを読み込み、ビジュアル モデル データへのポインタを返す */\n"
"SCENEGRAPH* Load( char const* aFileName );\n"

#. type: Title ==
#: plugins.adoc:197
#, no-wrap
msgid "Tutorials: 3D Plugin Class"
msgstr "チュートリアル: 3D プラグイン クラス"

#. type: Plain text
#: plugins.adoc:202
msgid ""
"This section contains a description of two very simple plugins of the PLUGIN_3D "
"class and walks the user through the setup and building of the code."
msgstr ""
"この章では２つのとても単純な PLUGIN_3D クラス プラグインについて解説し、ユーザーが"
"セットアップとコードのビルドを習得できるよう予行演習を行います。"

#. type: Title ===
#: plugins.adoc:205
#, no-wrap
msgid "Basic 3D Plugin"
msgstr "基本的な 3D プラグイン"

#. type: Plain text
#: plugins.adoc:214
msgid ""
"This tutorial walks the user through the development of a very basic 3D plugin "
"named \"PLUGIN_3D_DEMO1\". The purpose of this tutorial is only to demonstrate the "
"construction of a very basic 3D plugin which does nothing other than provide a few "
"filter strings which permit the KiCad user to filter file names while browsing for "
"3D models. The code demonstrated here is the absolute minimum requirement for any "
"3D plugin and can be used as a template for creating more advanced plugins."
msgstr ""
"このチュートリアルでは、\"PLUGIN_3D_DEMO1\" という名前の非常に基本的な 3D プラグイ"
"ンを開発することで予行演習を行います。このチュートリアルの目的は、KiCad ユーザーが "
"3D モデルをブラウズする際に使用可能なファイル名をフィルタリングする幾つかの文字列を"
"提供するだけという、非常に基本的な 3D プラグインの作成方法をデモすることです。ここ"
"でデモしているコードは任意の 3Dプラグイン に対する最低必要条件であり、より高度なプ"
"ラグインを作成するためのテンプレートとして使用することができます。"

#. type: Plain text
#: plugins.adoc:216
msgid "In order to build the demo project we require the following:"
msgstr "デモ プロジェクトをビルドするために必要なものは以下のとおりです:"

#. type: Plain text
#: plugins.adoc:218
msgid "https://cmake.org/[CMake]"
msgstr "https://cmake.org/[CMake]"

#. type: Plain text
#: plugins.adoc:219
msgid "KiCad plugin headers"
msgstr "KiCad プラグイン ヘッダ"

#. type: Plain text
#: plugins.adoc:220
msgid "KiCad Scene Graph library `kicad_3dsg`"
msgstr "KiCad Scene Graph ライブラリ `kicad_3dsg`"

#. type: Plain text
#: plugins.adoc:226
msgid ""
"To automatically detect the KiCad headers and library we shall use a CMake "
"FindPackage script; the script supplied in this tutorial should work on Linux and "
"Windows if the relevant header files are installed to `${KICAD_ROOT_DIR}/kicad` "
"and the KiCad Scene Graph library is installed in `${KICAD_ROOT_DIR}/lib`."
msgstr ""
"自動的に KiCad のヘッダとライブラリを検出するためには、CMake FindPackage スクリプト"
"を使うべきでしょう; 関連するヘッダ ファイルが  `${KICAD_ROOT_DIR}/kicad` に、KiCad "
"Scene Graph ライブラリが `${KICAD_ROOT_DIR}/lib` にインストールされているなら、この"
"チュートリアルで提供されているスクリプトは Linux および Windows 上で動作するはずで"
"す。"

#. type: Plain text
#: plugins.adoc:228
msgid "To start let's create a project directory and the FindPackage script:"
msgstr ""
"まず手始めに、プロジェクト ディレクトリと FindPackage スクリプトを作成してみましょ"
"う:"

#. type: delimited block -
#: plugins.adoc:239
#, no-wrap
msgid ""
"mkdir demo && cd demo\n"
"export DEMO_ROOT=${PWD}\n"
"mkdir CMakeModules && cd CMakeModules\n"
"cat > FindKICAD.cmake << _EOF\n"
"find_path( KICAD_INCLUDE_DIR kicad/plugins/kicad_plugin.h\n"
"    PATHS ${KICAD_ROOT_DIR}/include $ENV{KICAD_ROOT_DIR}/include\n"
"    DOC \"Kicad plugins header path.\"\n"
"    )\n"
msgstr ""
"mkdir demo && cd demo\n"
"export DEMO_ROOT=${PWD}\n"
"mkdir CMakeModules && cd CMakeModules\n"
"cat > FindKICAD.cmake << _EOF\n"
"find_path( KICAD_INCLUDE_DIR kicad/plugins/kicad_plugin.h\n"
"    PATHS ${KICAD_ROOT_DIR}/include $ENV{KICAD_ROOT_DIR}/include\n"
"    DOC \"Kicad plugins header path.\"\n"
"    )\n"

#. type: delimited block -
#: plugins.adoc:241
#, no-wrap
msgid "if( NOT ${KICAD_INCLUDE_DIR} STREQUAL \"KICAD_INCLUDE_DIR-NOTFOUND\" )\n"
msgstr "if( NOT ${KICAD_INCLUDE_DIR} STREQUAL \"KICAD_INCLUDE_DIR-NOTFOUND\" )\n"

#. type: delimited block -
#: plugins.adoc:247
#, no-wrap
msgid ""
"    # attempt to extract the version information from sg_version.h\n"
"    find_file( KICAD_SGVERSION sg_version.h\n"
"        PATHS ${KICAD_INCLUDE_DIR}\n"
"        PATH_SUFFIXES kicad/plugins/3dapi\n"
"        NO_DEFAULT_PATH )\n"
msgstr ""
"    # sg_version.h からバージョン情報の取得を試みる \n"
"    find_file( KICAD_SGVERSION sg_version.h\n"
"        PATHS ${KICAD_INCLUDE_DIR}\n"
"        PATH_SUFFIXES kicad/plugins/3dapi\n"
"        NO_DEFAULT_PATH )\n"

#. type: delimited block -
#: plugins.adoc:249
#, no-wrap
msgid "    if( NOT ${KICAD_SGVERSION} STREQUAL \"KICAD_SGVERSION-NOTFOUND\" )\n"
msgstr "    if( NOT ${KICAD_SGVERSION} STREQUAL \"KICAD_SGVERSION-NOTFOUND\" )\n"

#. type: delimited block -
#: plugins.adoc:252
#, no-wrap
msgid ""
"        # extract the \"#define KICADSG_VERSION*\" lines\n"
"        file( STRINGS ${KICAD_SGVERSION} _version REGEX \"^#define.*KICADSG_VERSION.*\" )\n"
msgstr ""
"        # \"#define KICADSG_VERSION*\" 行を抜き出す \n"
"        file( STRINGS ${KICAD_SGVERSION} _version REGEX \"^#define.*KICADSG_VERSION.*\" )\n"

#. type: delimited block -
#: plugins.adoc:256
#, no-wrap
msgid ""
"        foreach( SVAR ${_version} )\n"
"            string( REGEX MATCH KICADSG_VERSION_[M,A,J,O,R,I,N,P,T,C,H,E,V,I,S]* _VARNAME ${SVAR} )\n"
"            string( REGEX MATCH [0-9]+ _VALUE ${SVAR} )\n"
msgstr ""
"        foreach( SVAR ${_version} )\n"
"            string( REGEX MATCH KICADSG_VERSION_[M,A,J,O,R,I,N,P,T,C,H,E,V,I,S]* _VARNAME ${SVAR} )\n"
"            string( REGEX MATCH [0-9]+ _VALUE ${SVAR} )\n"

#. type: delimited block -
#: plugins.adoc:260
#, no-wrap
msgid ""
"            if( NOT ${_VARNAME} STREQUAL \"\" AND NOT ${_VALUE} STREQUAL \"\" )\n"
"                set( _${_VARNAME} ${_VALUE} )\n"
"            endif()\n"
msgstr ""
"            if( NOT ${_VARNAME} STREQUAL \"\" AND NOT ${_VALUE} STREQUAL \"\" )\n"
"                set( _${_VARNAME} ${_VALUE} )\n"
"            endif()\n"

#. type: delimited block -
#: plugins.adoc:262
#, no-wrap
msgid "        endforeach()\n"
msgstr "        endforeach()\n"

#. type: delimited block -
#: plugins.adoc:267
#, no-wrap
msgid ""
"        #ensure that NOT SG3D_VERSION* will evaluate to '0'\n"
"        if( NOT _KICADSG_VERSION_MAJOR )\n"
"            set( _KICADSG_VERSION_MAJOR 0 )\n"
"        endif()\n"
msgstr ""
"        # NOT SG3D_VERSION* が '0' と評価されることを保証する \n"
"        if( NOT _KICADSG_VERSION_MAJOR )\n"
"            set( _KICADSG_VERSION_MAJOR 0 )\n"
"        endif()\n"

#. type: delimited block -
#: plugins.adoc:271
#, no-wrap
msgid ""
"        if( NOT _KICADSG_VERSION_MINOR )\n"
"            set( _KICADSG_VERSION_MINOR 0 )\n"
"        endif()\n"
msgstr ""
"        if( NOT _KICADSG_VERSION_MINOR )\n"
"            set( _KICADSG_VERSION_MINOR 0 )\n"
"        endif()\n"

#. type: delimited block -
#: plugins.adoc:275
#, no-wrap
msgid ""
"        if( NOT _KICADSG_VERSION_PATCH )\n"
"            set( _KICADSG_VERSION_PATCH 0 )\n"
"        endif()\n"
msgstr ""
"        if( NOT _KICADSG_VERSION_PATCH )\n"
"            set( _KICADSG_VERSION_PATCH 0 )\n"
"        endif()\n"

#. type: delimited block -
#: plugins.adoc:279
#, no-wrap
msgid ""
"        if( NOT _KICADSG_VERSION_REVISION )\n"
"            set( _KICADSG_VERSION_REVISION 0 )\n"
"        endif()\n"
msgstr ""
"        if( NOT _KICADSG_VERSION_REVISION )\n"
"            set( _KICADSG_VERSION_REVISION 0 )\n"
"        endif()\n"

#. type: delimited block -
#: plugins.adoc:282
#, no-wrap
msgid ""
"        set( KICAD_VERSION ${_KICADSG_VERSION_MAJOR}.${_KICADSG_VERSION_MINOR}.${_KICADSG_VERSION_PATCH}.${_KICADSG_VERSION_REVISION} )\n"
"        unset( KICAD_SGVERSION CACHE )\n"
msgstr ""
"        set( KICAD_VERSION ${_KICADSG_VERSION_MAJOR}.${_KICADSG_VERSION_MINOR}.${_KICADSG_VERSION_PATCH}.${_KICADSG_VERSION_REVISION} )\n"
"        unset( KICAD_SGVERSION CACHE )\n"

#. type: delimited block -
#: plugins.adoc:285
#, no-wrap
msgid ""
"    endif()\n"
"endif()\n"
msgstr ""
"    endif()\n"
"endif()\n"

#. type: delimited block -
#: plugins.adoc:294
#, no-wrap
msgid ""
"find_library( KICAD_LIBRARY\n"
"    NAMES kicad_3dsg\n"
"    PATHS\n"
"        ${KICAD_ROOT_DIR}/lib $ENV{KICAD_ROOT_DIR}/lib\n"
"        ${KICAD_ROOT_DIR}/bin $ENV{KICAD_ROOT_DIR}/bin\n"
"    DOC \"Kicad scenegraph library path.\"\n"
"    )\n"
msgstr ""
"find_library( KICAD_LIBRARY\n"
"    NAMES kicad_3dsg\n"
"    PATHS\n"
"        ${KICAD_ROOT_DIR}/lib $ENV{KICAD_ROOT_DIR}/lib\n"
"        ${KICAD_ROOT_DIR}/bin $ENV{KICAD_ROOT_DIR}/bin\n"
"    DOC \"Kicad scenegraph library path.\"\n"
"    )\n"

#. type: delimited block -
#: plugins.adoc:302
#, no-wrap
msgid ""
"include( FindPackageHandleStandardArgs )\n"
"FIND_PACKAGE_HANDLE_STANDARD_ARGS( KICAD\n"
"    REQUIRED_VARS\n"
"        KICAD_INCLUDE_DIR\n"
"        KICAD_LIBRARY\n"
"        KICAD_VERSION\n"
"    VERSION_VAR KICAD_VERSION )\n"
msgstr ""
"include( FindPackageHandleStandardArgs )\n"
"FIND_PACKAGE_HANDLE_STANDARD_ARGS( KICAD\n"
"    REQUIRED_VARS\n"
"        KICAD_INCLUDE_DIR\n"
"        KICAD_LIBRARY\n"
"        KICAD_VERSION\n"
"    VERSION_VAR KICAD_VERSION )\n"

#. type: delimited block -
#: plugins.adoc:310
#, no-wrap
msgid ""
"mark_as_advanced( KICAD_INCLUDE_DIR )\n"
"set( KICAD_VERSION_MAJOR ${_KICADSG_VERSION_MAJOR} CACHE INTERNAL \"\" )\n"
"set( KICAD_VERSION_MINOR ${_KICADSG_VERSION_MINOR} CACHE INTERNAL \"\" )\n"
"set( KICAD_VERSION_PATCH ${_KICADSG_VERSION_PATCH} CACHE INTERNAL \"\" )\n"
"set( KICAD_VERSION_TWEAK ${_KICADSG_VERSION_REVISION} CACHE INTERNAL \"\" )\n"
"_EOF\n"
msgstr ""
"mark_as_advanced( KICAD_INCLUDE_DIR )\n"
"set( KICAD_VERSION_MAJOR ${_KICADSG_VERSION_MAJOR} CACHE INTERNAL \"\" )\n"
"set( KICAD_VERSION_MINOR ${_KICADSG_VERSION_MINOR} CACHE INTERNAL \"\" )\n"
"set( KICAD_VERSION_PATCH ${_KICADSG_VERSION_PATCH} CACHE INTERNAL \"\" )\n"
"set( KICAD_VERSION_TWEAK ${_KICADSG_VERSION_REVISION} CACHE INTERNAL \"\" )\n"
"_EOF\n"

#. type: Plain text
#: plugins.adoc:319
msgid ""
"Kicad and its plugin headers must be installed; if they are installed to a user "
"directory or under `/opt` on Linux, or you are using Windows, you will need to set "
"the `KICAD_ROOT_DIR` environment variable to point to the directory containing the "
"KiCad `include` and `lib` directories. For OS X the FindPackage script presented "
"here may require some adjustments."
msgstr ""
"KiCad とそのプラグイン ヘッダーをインストールしておく必要があります; もし Linux で"
"それらがユーザー ディレクトリまたは `/opt` の下にインストールされているか、或いは "
"Windows を使っているならば、KiCad の `include` と `lib` ディレクトリを含むディレク"
"トリを指すように `KICAD_ROOT_DIR` 環境変数をセットする必要があります。OS Xでは、こ"
"こに示された FindPackage スクリプトを多少調整する必要があるでしょう。"

#. type: Plain text
#: plugins.adoc:322
msgid ""
"To configure and build the tutorial code we will use CMake and create a "
"`CMakeLists.txt` script file:"
msgstr ""
"チュートリアルのコードを組んでビルドするため、CMake を使用して `CMakeLists.txt` ス"
"クリプト ファイルを作成します:"

#. type: delimited block -
#: plugins.adoc:329
#, no-wrap
msgid ""
"cd ${DEMO_ROOT}\n"
"cat > CMakeLists.txt << _EOF\n"
"# declare the name of the project\n"
"project( PLUGIN_DEMO )\n"
msgstr ""
"cd ${DEMO_ROOT}\n"
"cat > CMakeLists.txt << _EOF\n"
"# declare the name of the project\n"
"project( PLUGIN_DEMO )\n"

#. type: delimited block -
#: plugins.adoc:332
#, no-wrap
msgid ""
"# check that we have a version of CMake with all required features\n"
"cmake_minimum_required( VERSION 2.8.12 FATAL_ERROR )\n"
msgstr ""
"# 必要な機能を全て備えた CMake のバージョンかどうかチェックする \n"
"cmake_minimum_required( VERSION 2.8.12 FATAL_ERROR )\n"

#. type: delimited block -
#: plugins.adoc:335
#, no-wrap
msgid ""
"# inform CMake of where to find the FindKICAD script\n"
"set( CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules )\n"
msgstr ""
"# FindKICAD スクリプトがどこにあるか CMake に通知する \n"
"set( CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules )\n"

#. type: delimited block -
#: plugins.adoc:341
#, no-wrap
msgid ""
"# attempt to discover the installed kicad headers and library\n"
"# and set the variables:\n"
"#     KICAD_INCLUDE_DIR\n"
"#     KICAD_LIBRARY\n"
"find_package( KICAD 1.0 REQUIRED )\n"
msgstr ""
"# インストール済の KiCad ヘッダとライブラリを見つけるよう試みる \n"
"# そして変数にセットする:\n"
"#     KICAD_INCLUDE_DIR\n"
"#     KICAD_LIBRARY\n"
"find_package( KICAD 1.0 REQUIRED )\n"

#. type: delimited block -
#: plugins.adoc:344
#, no-wrap
msgid ""
"# add the kicad include directory to the compiler's search path\n"
"include_directories( ${KICAD_INCLUDE_DIR}/kicad )\n"
msgstr ""
"# コンパイラの検索パスに KiCad include ディレクトリを追加する \n"
"include_directories( ${KICAD_INCLUDE_DIR}/kicad )\n"

#. type: delimited block -
#: plugins.adoc:349
#, no-wrap
msgid ""
"# create a plugin named s3d_plugin_demo1\n"
"add_library( s3d_plugin_demo1 MODULE\n"
"    src/s3d_plugin_demo1.cpp\n"
"    )\n"
msgstr ""
"# s3d_plugin_demo1 という名前のプラグインを作成する \n"
"add_library( s3d_plugin_demo1 MODULE\n"
"    src/s3d_plugin_demo1.cpp\n"
"    )\n"

#. type: delimited block -
#: plugins.adoc:351
#, no-wrap
msgid "_EOF\n"
msgstr "_EOF\n"

#. type: Plain text
#: plugins.adoc:356
msgid ""
"The first demo project is very basic; it consists of a single file with no "
"external link dependencies other than the compiler defaults.  We start by creating "
"a source directory:"
msgstr ""
"最初のデモ プロジェクトはとても基本的なものです; コンパイラのデフォルト以外は外部リ"
"ンクの依存関係を持たない単一ファイルで構成されています。まずはソース ディレクトリを"
"作成することから始めます:"

#. type: delimited block -
#: plugins.adoc:362
#, no-wrap
msgid ""
"cd ${DEMO_ROOT}\n"
"mkdir src && cd src\n"
"export DEMO_SRC=${PWD}\n"
msgstr ""
"cd ${DEMO_ROOT}\n"
"mkdir src && cd src\n"
"export DEMO_SRC=${PWD}\n"

#. type: Plain text
#: plugins.adoc:365
msgid "Now we create the plugin source itself:"
msgstr "ではプラグイン ソース自体を作成しましょう:"

#. type: Block title
#: plugins.adoc:366
#, no-wrap
msgid "s3d_plugin_demo1.cpp"
msgstr "s3d_plugin_demo1.cpp"

#. type: delimited block -
#: plugins.adoc:370
#, no-wrap
msgid "#include <iostream>\n"
msgstr "#include <iostream>\n"

#. type: delimited block -
#: plugins.adoc:373
#, no-wrap
msgid ""
"// the 3d_plugin.h header defines the functions required of 3D plugins\n"
"#include \"plugins/3d/3d_plugin.h\"\n"
msgstr ""
"//  3d_plugin.h ヘッダに 3D プラグインで必要とされる関数を定義する \n"
"#include \"plugins/3d/3d_plugin.h\"\n"

#. type: delimited block -
#: plugins.adoc:380
#, no-wrap
msgid ""
"// define the version information of this plugin; do not confuse this\n"
"// with the Plugin Class version which is defined in 3d_plugin.h\n"
"#define PLUGIN_3D_DEMO1_MAJOR 1\n"
"#define PLUGIN_3D_DEMO1_MINOR 0\n"
"#define PLUGIN_3D_DEMO1_PATCH 0\n"
"#define PLUGIN_3D_DEMO1_REVNO 0\n"
msgstr ""
"// このプラグインのバージョン情報を定義する; 3d_plugin.h で定義されている\n"
"// プラ??グイン クラス バージョンと混同しないでください\n"
"#define PLUGIN_3D_DEMO1_MAJOR 1\n"
"#define PLUGIN_3D_DEMO1_MINOR 0\n"
"#define PLUGIN_3D_DEMO1_PATCH 0\n"
"#define PLUGIN_3D_DEMO1_REVNO 0\n"

#. type: delimited block -
#: plugins.adoc:386
#, no-wrap
msgid ""
"// implement the function which provides users with this plugin's name\n"
"const char* GetKicadPluginName( void )\n"
"{\n"
"    return \"PLUGIN_3D_DEMO1\";\n"
"}\n"
msgstr ""
"// このプラグイン名をユーザーに提供する関数を実装する\n"
"const char* GetKicadPluginName( void )\n"
"{\n"
"    return \"PLUGIN_3D_DEMO1\";\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:393
#, no-wrap
msgid ""
"// implement the function which provides users with this plugin's version\n"
"void GetPluginVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Patch, unsigned char* Revision )\n"
"{\n"
"    if( Major )\n"
"        *Major = PLUGIN_3D_DEMO1_MAJOR;\n"
msgstr ""
"// このプラグインのバージョンをユーザに提供する関数を実装する\n"
"void GetPluginVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Patch, unsigned char* Revision )\n"
"{\n"
"    if( Major )\n"
"        *Major = PLUGIN_3D_DEMO1_MAJOR;\n"

#. type: delimited block -
#: plugins.adoc:396
#, no-wrap
msgid ""
"    if( Minor )\n"
"        *Minor = PLUGIN_3D_DEMO1_MINOR;\n"
msgstr ""
"    if( Minor )\n"
"        *Minor = PLUGIN_3D_DEMO1_MINOR;\n"

#. type: delimited block -
#: plugins.adoc:399
#, no-wrap
msgid ""
"    if( Patch )\n"
"        *Patch = PLUGIN_3D_DEMO1_PATCH;\n"
msgstr ""
"    if( Patch )\n"
"        *Patch = PLUGIN_3D_DEMO1_PATCH;\n"

#. type: delimited block -
#: plugins.adoc:402
#, no-wrap
msgid ""
"    if( Revision )\n"
"        *Revision = PLUGIN_3D_DEMO1_REVNO;\n"
msgstr ""
"    if( Revision )\n"
"        *Revision = PLUGIN_3D_DEMO1_REVNO;\n"

#. type: delimited block -
#: plugins.adoc:405 plugins.adoc:641
#, no-wrap
msgid ""
"    return;\n"
"}\n"
msgstr ""
"    return;\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:413
#, no-wrap
msgid ""
"// number of extensions supported; on *NIX systems the extensions are\n"
"// provided twice - once in lower case and once in upper case letters\n"
"#ifdef _WIN32\n"
"    #define NEXTS 7\n"
"#else\n"
"    #define NEXTS 14\n"
"#endif\n"
msgstr ""
"// サポートされている拡張子の数; *NIX システムでは拡張子が\n"
"// 倍になります - 一つは小文字、もう一つは大文字です\n"
"#ifdef _WIN32\n"
"    #define NEXTS 7\n"
"#else\n"
"    #define NEXTS 14\n"
"#endif\n"

#. type: delimited block -
#: plugins.adoc:416
#, no-wrap
msgid ""
"// number of filter sets supported\n"
"#define NFILS 5\n"
msgstr ""
"// サポートされているフィルタ セットの数\n"
"#define NFILS 5\n"

#. type: delimited block -
#: plugins.adoc:426
#, no-wrap
msgid ""
"// define the extension strings and filter strings which this\n"
"// plugin will supply to the user\n"
"static char ext0[] = \"wrl\";\n"
"static char ext1[] = \"x3d\";\n"
"static char ext2[] = \"emn\";\n"
"static char ext3[] = \"iges\";\n"
"static char ext4[] = \"igs\";\n"
"static char ext5[] = \"stp\";\n"
"static char ext6[] = \"step\";\n"
msgstr ""
"// このプラグインがユーザーに提供するフィルタ文字列と\n"
"// 拡張子の文字列を定義する\n"
"static char ext0[] = \"wrl\";\n"
"static char ext1[] = \"x3d\";\n"
"static char ext2[] = \"emn\";\n"
"static char ext3[] = \"iges\";\n"
"static char ext4[] = \"igs\";\n"
"static char ext5[] = \"stp\";\n"
"static char ext6[] = \"step\";\n"

#. type: delimited block -
#: plugins.adoc:441
#, no-wrap
msgid ""
"#ifdef _WIN32\n"
"static char fil0[] = \"VRML 1.0/2.0 (*.wrl)|*.wrl\";\n"
"static char fil1[] = \"X3D (*.x3d)|*.x3d\";\n"
"static char fil2[] = \"IDF 2.0/3.0 (*.emn)|*.emn\";\n"
"static char fil3[] = \"IGESv5.3 (*.igs;*.iges)|*.igs;*.iges\";\n"
"static char fil4[] = \"STEP (*.stp;*.step)|*.stp;*.step\";\n"
"#else\n"
"static char ext7[] = \"WRL\";\n"
"static char ext8[] = \"X3D\";\n"
"static char ext9[] = \"EMN\";\n"
"static char ext10[] = \"IGES\";\n"
"static char ext11[] = \"IGS\";\n"
"static char ext12[] = \"STP\";\n"
"static char ext13[] = \"STEP\";\n"
msgstr ""
"#ifdef _WIN32\n"
"static char fil0[] = \"VRML 1.0/2.0 (*.wrl)|*.wrl\";\n"
"static char fil1[] = \"X3D (*.x3d)|*.x3d\";\n"
"static char fil2[] = \"IDF 2.0/3.0 (*.emn)|*.emn\";\n"
"static char fil3[] = \"IGESv5.3 (*.igs;*.iges)|*.igs;*.iges\";\n"
"static char fil4[] = \"STEP (*.stp;*.step)|*.stp;*.step\";\n"
"#else\n"
"static char ext7[] = \"WRL\";\n"
"static char ext8[] = \"X3D\";\n"
"static char ext9[] = \"EMN\";\n"
"static char ext10[] = \"IGES\";\n"
"static char ext11[] = \"IGS\";\n"
"static char ext12[] = \"STP\";\n"
"static char ext13[] = \"STEP\";\n"

#. type: delimited block -
#: plugins.adoc:448
#, no-wrap
msgid ""
"static char fil0[] = \"VRML 1.0/2.0 (*.wrl;*.WRL)|*.wrl;*.WRL\";\n"
"static char fil1[] = \"X3D (*.x3d;*.X3D)|*.x3d;*.X3D\";\n"
"static char fil2[] = \"IDF 2.0/3.0 (*.emn;*.EMN)|*.emn;*.EMN\";\n"
"static char fil3[] = \"IGESv5.3 (*.igs;*.iges;*.IGS;*.IGES)|*.igs;*.iges;*.IGS;*.IGES\";\n"
"static char fil4[] = \"STEP (*.stp;*.step;*.STP;*.STEP)|*.stp;*.step;*.STP;*.STEP\";\n"
"#endif\n"
msgstr ""
"static char fil0[] = \"VRML 1.0/2.0 (*.wrl;*.WRL)|*.wrl;*.WRL\";\n"
"static char fil1[] = \"X3D (*.x3d;*.X3D)|*.x3d;*.X3D\";\n"
"static char fil2[] = \"IDF 2.0/3.0 (*.emn;*.EMN)|*.emn;*.EMN\";\n"
"static char fil3[] = \"IGESv5.3 (*.igs;*.iges;*.IGS;*.IGES)|*.igs;*.iges;*.IGS;*.IGES\";\n"
"static char fil4[] = \"STEP (*.stp;*.step;*.STP;*.STEP)|*.stp;*.step;*.STP;*.STEP\";\n"
"#endif\n"

#. type: delimited block -
#: plugins.adoc:455
#, no-wrap
msgid ""
"// instantiate a convenient data structure for accessing the\n"
"// lists of extension and filter strings\n"
"static struct FILE_DATA\n"
"{\n"
"    char const* extensions[NEXTS];\n"
"    char const* filters[NFILS];\n"
msgstr ""
"// 拡張子とフィルタ文字列のリストへのアクセスに便利な\n"
"// 構造体をインスタンス化する\n"
"static struct FILE_DATA\n"
"{\n"
"    char const* extensions[NEXTS];\n"
"    char const* filters[NFILS];\n"

#. type: delimited block -
#: plugins.adoc:470
#, no-wrap
msgid ""
"    FILE_DATA()\n"
"    {\n"
"        extensions[0] = ext0;\n"
"        extensions[1] = ext1;\n"
"        extensions[2] = ext2;\n"
"        extensions[3] = ext3;\n"
"        extensions[4] = ext4;\n"
"        extensions[5] = ext5;\n"
"        extensions[6] = ext6;\n"
"        filters[0] = fil0;\n"
"        filters[1] = fil1;\n"
"        filters[2] = fil2;\n"
"        filters[3] = fil3;\n"
"        filters[4] = fil4;\n"
msgstr ""
"    FILE_DATA()\n"
"    {\n"
"        extensions[0] = ext0;\n"
"        extensions[1] = ext1;\n"
"        extensions[2] = ext2;\n"
"        extensions[3] = ext3;\n"
"        extensions[4] = ext4;\n"
"        extensions[5] = ext5;\n"
"        extensions[6] = ext6;\n"
"        filters[0] = fil0;\n"
"        filters[1] = fil1;\n"
"        filters[2] = fil2;\n"
"        filters[3] = fil3;\n"
"        filters[4] = fil4;\n"

#. type: delimited block -
#: plugins.adoc:482
#, no-wrap
msgid ""
"#ifndef _WIN32\n"
"        extensions[7] = ext7;\n"
"        extensions[8] = ext8;\n"
"        extensions[9] = ext9;\n"
"        extensions[10] = ext10;\n"
"        extensions[11] = ext11;\n"
"        extensions[12] = ext12;\n"
"        extensions[13] = ext13;\n"
"#endif\n"
"        return;\n"
"    }\n"
msgstr ""
"#ifndef _WIN32\n"
"        extensions[7] = ext7;\n"
"        extensions[8] = ext8;\n"
"        extensions[9] = ext9;\n"
"        extensions[10] = ext10;\n"
"        extensions[11] = ext11;\n"
"        extensions[12] = ext12;\n"
"        extensions[13] = ext13;\n"
"#endif\n"
"        return;\n"
"    }\n"

#. type: delimited block -
#: plugins.adoc:484 plugins.adoc:681
#, no-wrap
msgid "} file_data;\n"
msgstr "} file_data;\n"

#. type: delimited block -
#: plugins.adoc:491
#, no-wrap
msgid ""
"// return the number of extensions supported by this plugin\n"
"int GetNExtensions( void )\n"
"{\n"
"    return NEXTS;\n"
"}\n"
msgstr ""
"// このプラグインでサポートされている拡張子の数を返す \n"
"int GetNExtensions( void )\n"
"{\n"
"    return NEXTS;\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:497
#, no-wrap
msgid ""
"// return the indexed extension string\n"
"char const* GetModelExtension( int aIndex )\n"
"{\n"
"    if( aIndex < 0 || aIndex >= NEXTS )\n"
"        return NULL;\n"
msgstr ""
"// インデックス化された拡張子文字列を返す \n"
"char const* GetModelExtension( int aIndex )\n"
"{\n"
"    if( aIndex < 0 || aIndex >= NEXTS )\n"
"        return NULL;\n"

#. type: delimited block -
#: plugins.adoc:500 plugins.adoc:696
#, no-wrap
msgid ""
"    return file_data.extensions[aIndex];\n"
"}\n"
msgstr ""
"    return file_data.extensions[aIndex];\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:506
#, no-wrap
msgid ""
"// return the number of filter strings provided by this plugin\n"
"int GetNFilters( void )\n"
"{\n"
"    return NFILS;\n"
"}\n"
msgstr ""
"// このプラグインで提供されるフィルタ文字列の数を返す \n"
"int GetNFilters( void )\n"
"{\n"
"    return NFILS;\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:512
#, no-wrap
msgid ""
"// return the indexed filter string\n"
"char const* GetFileFilter( int aIndex )\n"
"{\n"
"    if( aIndex < 0 || aIndex >= NFILS )\n"
"        return NULL;\n"
msgstr ""
"// インデックス化されたフィルタ文字列を返す \n"
"char const* GetFileFilter( int aIndex )\n"
"{\n"
"    if( aIndex < 0 || aIndex >= NFILS )\n"
"        return NULL;\n"

#. type: delimited block -
#: plugins.adoc:515 plugins.adoc:711
#, no-wrap
msgid ""
"    return file_data.filters[aIndex];\n"
"}\n"
msgstr ""
"    return file_data.filters[aIndex];\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:521
#, no-wrap
msgid ""
"// return false since this plugin does not provide visualization data\n"
"bool CanRender( void )\n"
"{\n"
"    return false;\n"
"}\n"
msgstr ""
"// このプラグインは可視化されたデータを提供しないので、false を返す \n"
"bool CanRender( void )\n"
"{\n"
"    return false;\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:528
#, no-wrap
msgid ""
"// return NULL since this plugin does not provide visualization data\n"
"SCENEGRAPH* Load( char const* aFileName )\n"
"{\n"
"    // this dummy plugin does not support rendering of any models\n"
"    return NULL;\n"
"}\n"
msgstr ""
"// このプラグインは可視化されたデータを提供しないので、NULL を返す \n"
"SCENEGRAPH* Load( char const* aFileName )\n"
"{\n"
"    // this dummy plugin does not support rendering of any models\n"
"    return NULL;\n"
"}\n"

#. type: Plain text
#: plugins.adoc:541
msgid ""
"This source file meets all the minimum requirements to implement a 3D plugin. The "
"plugin does not produce any data for rendering models but it can provide KiCad "
"with a list of supported model file extensions and file extension filters to "
"enhance the 3D model file selection dialog. Within KiCad the extension strings are "
"used to select the plugins which may be used to load a specified model; for "
"example, if the plugin is `wrl` then KiCad will invoke each plugin which claims to "
"support the extension `wrl` until a plugin returns visualization data. The file "
"filters provided by each plugin are passed to the 3D file selector dialog to "
"improve the browsing UI."
msgstr ""
"このソースファイルは 3D プラグインを実装するための最低必要条件を満足しています。こ"
"のプラグインはモデルをレンダリングするためのいかなるデータも作り出しませんが、3D モ"
"デル ファイル選択ダイアログを機能強化してサポートされているモデル拡張子のリストと"
"ファイル拡張子フィルタを KiCad に提供します。KiCad 内で拡張子文字列は特定の 3D モデ"
"ルを読み込むために使われるプラグインの選択で使用されます; 例えば、もしプラグインが "
"`wrl` ならば、KiCad はプラグインが可視化されたデータを返すまで拡張子 `wrl` をサポー"
"トすると宣言された各プラグインを呼び出すでしょう。各プラグインが提供するファイル "
"フィルタはブラウジング UI を改良すべく 3D ファイル選択ダイアログへと渡されます。 "

#. type: Plain text
#: plugins.adoc:543
msgid "To build the plugin:"
msgstr "プラグインをビルドするには:"

#. type: delimited block -
#: plugins.adoc:550
#, no-wrap
msgid ""
"cd ${DEMO_ROOT}\n"
"# export KICAD_ROOT_DIR if necessary\n"
"mkdir build && cd build\n"
"cmake .. && make\n"
msgstr ""
"cd ${DEMO_ROOT}\n"
"# export KICAD_ROOT_DIR if necessary\n"
"mkdir build && cd build\n"
"cmake .. && make\n"

#. type: Plain text
#: plugins.adoc:554
msgid ""
"The plugin will be built but not installed; you must copy the plugin file to "
"KiCad's plugin directory if you wish to load the plugin."
msgstr ""
"プラグインはビルドされますが、インストールはされません; プラグインを読み込みたいの"
"であれば、KiCad のプラグイン ディレクトリにプラグイン ファイルをコピーする必要があ"
"ります。"

#. type: Title ===
#: plugins.adoc:557
#, no-wrap
msgid "Advanced 3D Plugin"
msgstr "高度な 3D プラグイン"

#. type: Plain text
#: plugins.adoc:569
msgid ""
"This tutorial walks the user through the development of a 3D plugin named "
"\"PLUGIN_3D_DEMO2\". The purpose of this tutorial is to demonstrate the "
"construction of a very basic scene graph which the KiCad previewer can render. The "
"plugin claims to handle files of type `txt`. Although the file must exist in order "
"for the cache manager to invoke the plugin, the file contents are not processed by "
"this plugin; instead, the plugin simply creates a scene graph containing a pair of "
"tetrahedra.  This tutorial assumes that the first tutorial had been completed and "
"that the CMakeLists.txt and FindKICAD.cmake script files have been created."
msgstr ""
"このチュートリアルでは、\"PLUGIN_3D_DEMO2\" という名前の 3D プラグインを開発するこ"
"とで予行演習を行います。このチュートリアルの目的は、レンダリング可能な KiCad プレ"
"ビューアで非常に基本的なシーン グラフの構造図をデモすることです。このプラグインは "
"`txt` タイプのファイルを要求します。キャッシュ マネージャーがプラグインを呼び出すた"
"めにはファイルが存在しなければなりませんが、ファイルの中身はプラグインでは処理され"
"ません; 代わりにプラグインは単に四面体のペアを含んだシーン グラフを作るだけです。こ"
"のチュートリアルは、最初のチュートリアルを完了しており CMakeLists.txt と FindKICAD."
"cmake スクリプト ファイルが既に作られている状況を想定して書かれています。"

#. type: Plain text
#: plugins.adoc:580
msgid ""
"Place the new source file in the same directory as the previous tutorial's source "
"file and we will extend the previous tutorial's CMakeLists.txt file to build this "
"tutorial. Since this plugin will create a scene graph for KiCad we need to link to "
"KiCad's scene graph library `kicad_3dsg`. KiCad's Scene Graph Library provides a "
"set of classes which can be used to build the Scene Graph Object; the Scene Graph "
"Object is an intermediate data visualization format used by the 3D Cache Manager. "
"All plugins which support model visualization must translate the model data into a "
"scene graph via this library."
msgstr ""
"前のチュートリアルのソース ファイルと同じディレクトリに新しいソース ファイルを置"
"き、このチュートリアルをビルドするため前のチュートリアルの CMakeLists.txt ファイル"
"を拡張しましょう。このプラグインは KiCad のシーン グラフを作るので、KiCad のシーン "
"グラフ ライブラリ `kicad_3dsg` へのリンクが必要となります。KiCad のシーン グラフ ラ"
"イブラリはシーン グラフ オブジェクトをビルドするために使われるクラスのセットを提供"
"します。シーン グラフ オブジェクトは 3D キャッシュ マネージャで使われる可視化フォー"
"マットの中間データです。モデルの可視化をサポートする全てのプラグインは、このライブ"
"ラリ経由でモデルデータをシーン グラフへと変換しなければなりません。"

#. type: Plain text
#: plugins.adoc:582
msgid "The first step is to extend `CMakeLists.txt` to build this tutorial project:"
msgstr ""
"最初のステップは、このシュートリアル プロジェクトをビルドできるように `CMakeLists."
"txt` を拡張することです:"

#. type: delimited block -
#: plugins.adoc:590
#, no-wrap
msgid ""
"cd ${DEMO_ROOT}\n"
"cat >> CMakeLists.txt << _EOF\n"
"add_library( s3d_plugin_demo2 MODULE\n"
"    src/s3d_plugin_demo2.cpp\n"
"    )\n"
msgstr ""
"cd ${DEMO_ROOT}\n"
"cat >> CMakeLists.txt << _EOF\n"
"add_library( s3d_plugin_demo2 MODULE\n"
"    src/s3d_plugin_demo2.cpp\n"
"    )\n"

#. type: delimited block -
#: plugins.adoc:593
#, no-wrap
msgid ""
"target_link_libraries( s3d_plugin_demo2 ${KICAD_LIBRARY} )\n"
"_EOF\n"
msgstr ""
"target_link_libraries( s3d_plugin_demo2 ${KICAD_LIBRARY} )\n"
"_EOF\n"

#. type: Plain text
#: plugins.adoc:596
msgid "Now we change to the source directory and create the source file:"
msgstr "ではソース ディレクトリへと移動してソース ファイルを作成しましょう:"

#. type: delimited block -
#: plugins.adoc:600
#, no-wrap
msgid "cd ${DEMO_SRC}\n"
msgstr "cd ${DEMO_SRC}\n"

#. type: Block title
#: plugins.adoc:602
#, no-wrap
msgid "s3d_plugin_demo2.cpp"
msgstr "s3d_plugin_demo2.cpp"

#. type: delimited block -
#: plugins.adoc:610
#, no-wrap
msgid ""
"#include <cmath>\n"
"// 3D Plugin Class declarations\n"
"#include \"plugins/3d/3d_plugin.h\"\n"
"// interface to KiCad Scene Graph Library\n"
"#include \"plugins/3dapi/ifsg_all.h\"\n"
msgstr ""
"#include <cmath>\n"
"// 3D Plugin Class declarations\n"
"#include \"plugins/3d/3d_plugin.h\"\n"
"// interface to KiCad Scene Graph Library\n"
"#include \"plugins/3dapi/ifsg_all.h\"\n"

#. type: delimited block -
#: plugins.adoc:616
#, no-wrap
msgid ""
"// version information for this plugin\n"
"#define PLUGIN_3D_DEMO2_MAJOR 1\n"
"#define PLUGIN_3D_DEMO2_MINOR 0\n"
"#define PLUGIN_3D_DEMO2_PATCH 0\n"
"#define PLUGIN_3D_DEMO2_REVNO 0\n"
msgstr ""
"//  このプラグインのバージョン情報\n"
"#define PLUGIN_3D_DEMO2_MAJOR 1\n"
"#define PLUGIN_3D_DEMO2_MINOR 0\n"
"#define PLUGIN_3D_DEMO2_PATCH 0\n"
"#define PLUGIN_3D_DEMO2_REVNO 0\n"

#. type: delimited block -
#: plugins.adoc:622
#, no-wrap
msgid ""
"// provide the name of this plugin\n"
"const char* GetKicadPluginName( void )\n"
"{\n"
"    return \"PLUGIN_3D_DEMO2\";\n"
"}\n"
msgstr ""
"// このプラグインの名前を提供する\n"
"const char* GetKicadPluginName( void )\n"
"{\n"
"    return \"PLUGIN_3D_DEMO2\";\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:629
#, no-wrap
msgid ""
"// provide the version of this plugin\n"
"void GetPluginVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Patch, unsigned char* Revision )\n"
"{\n"
"    if( Major )\n"
"        *Major = PLUGIN_3D_DEMO2_MAJOR;\n"
msgstr ""
"// このプラグインのバージョンを提供する\n"
"void GetPluginVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Patch, unsigned char* Revision )\n"
"{\n"
"    if( Major )\n"
"        *Major = PLUGIN_3D_DEMO2_MAJOR;\n"

#. type: delimited block -
#: plugins.adoc:632
#, no-wrap
msgid ""
"    if( Minor )\n"
"        *Minor = PLUGIN_3D_DEMO2_MINOR;\n"
msgstr ""
"    if( Minor )\n"
"        *Minor = PLUGIN_3D_DEMO2_MINOR;\n"

#. type: delimited block -
#: plugins.adoc:635
#, no-wrap
msgid ""
"    if( Patch )\n"
"        *Patch = PLUGIN_3D_DEMO2_PATCH;\n"
msgstr ""
"    if( Patch )\n"
"        *Patch = PLUGIN_3D_DEMO2_PATCH;\n"

#. type: delimited block -
#: plugins.adoc:638
#, no-wrap
msgid ""
"    if( Revision )\n"
"        *Revision = PLUGIN_3D_DEMO2_REVNO;\n"
msgstr ""
"    if( Revision )\n"
"        *Revision = PLUGIN_3D_DEMO2_REVNO;\n"

#. type: delimited block -
#: plugins.adoc:649
#, no-wrap
msgid ""
"// number of extensions supported\n"
"#ifdef _WIN32\n"
"#define NEXTS 1\n"
"#else\n"
"#define NEXTS 2\n"
"#endif\n"
msgstr ""
"// サポートされている拡張子の数\n"
"#ifdef _WIN32\n"
"#define NEXTS 1\n"
"#else\n"
"#define NEXTS 2\n"
"#endif\n"

#. type: delimited block -
#: plugins.adoc:652
#, no-wrap
msgid ""
"// number of filter sets supported\n"
"#define NFILS 1\n"
msgstr ""
"// サポートされているフィルタ セットの数\n"
"#define NFILS 1\n"

#. type: delimited block -
#: plugins.adoc:654
#, no-wrap
msgid "static char ext0[] = \"txt\";\n"
msgstr "static char ext0[] = \"txt\";\n"

#. type: delimited block -
#: plugins.adoc:659
#, no-wrap
msgid ""
"#ifdef _WIN32\n"
"static char fil0[] = \"demo (*.txt)|*.txt\";\n"
"#else\n"
"static char ext1[] = \"TXT\";\n"
msgstr ""
"#ifdef _WIN32\n"
"static char fil0[] = \"demo (*.txt)|*.txt\";\n"
"#else\n"
"static char ext1[] = \"TXT\";\n"

#. type: delimited block -
#: plugins.adoc:662
#, no-wrap
msgid ""
"static char fil0[] = \"demo (*.txt;*.TXT)|*.txt;*.TXT\";\n"
"#endif\n"
msgstr ""
"static char fil0[] = \"demo (*.txt;*.TXT)|*.txt;*.TXT\";\n"
"#endif\n"

#. type: delimited block -
#: plugins.adoc:668
#, no-wrap
msgid ""
"static struct FILE_DATA\n"
"{\n"
"    char const* extensions[NEXTS];\n"
"    char const* filters[NFILS];\n"
msgstr ""
"static struct FILE_DATA\n"
"{\n"
"    char const* extensions[NEXTS];\n"
"    char const* filters[NFILS];\n"

#. type: delimited block -
#: plugins.adoc:673
#, no-wrap
msgid ""
"    FILE_DATA()\n"
"    {\n"
"        extensions[0] = ext0;\n"
"        filters[0] = fil0;\n"
msgstr ""
"    FILE_DATA()\n"
"    {\n"
"        extensions[0] = ext0;\n"
"        filters[0] = fil0;\n"

#. type: delimited block -
#: plugins.adoc:679
#, no-wrap
msgid ""
"#ifndef _WIN32\n"
"        extensions[1] = ext1;\n"
"#endif\n"
"        return;\n"
"    }\n"
msgstr ""
"#ifndef _WIN32\n"
"        extensions[1] = ext1;\n"
"#endif\n"
"        return;\n"
"    }\n"

#. type: delimited block -
#: plugins.adoc:687
#, no-wrap
msgid ""
"int GetNExtensions( void )\n"
"{\n"
"    return NEXTS;\n"
"}\n"
msgstr ""
"int GetNExtensions( void )\n"
"{\n"
"    return NEXTS;\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:693
#, no-wrap
msgid ""
"char const* GetModelExtension( int aIndex )\n"
"{\n"
"    if( aIndex < 0 || aIndex >= NEXTS )\n"
"        return NULL;\n"
msgstr ""
"char const* GetModelExtension( int aIndex )\n"
"{\n"
"    if( aIndex < 0 || aIndex >= NEXTS )\n"
"        return NULL;\n"

#. type: delimited block -
#: plugins.adoc:702
#, no-wrap
msgid ""
"int GetNFilters( void )\n"
"{\n"
"    return NFILS;\n"
"}\n"
msgstr ""
"int GetNFilters( void )\n"
"{\n"
"    return NFILS;\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:708
#, no-wrap
msgid ""
"char const* GetFileFilter( int aIndex )\n"
"{\n"
"    if( aIndex < 0 || aIndex >= NFILS )\n"
"        return NULL;\n"
msgstr ""
"char const* GetFileFilter( int aIndex )\n"
"{\n"
"    if( aIndex < 0 || aIndex >= NFILS )\n"
"        return NULL;\n"

#. type: delimited block -
#: plugins.adoc:718
#, no-wrap
msgid ""
"// return true since this plugin can provide visualization data\n"
"bool CanRender( void )\n"
"{\n"
"    return true;\n"
"}\n"
msgstr ""
"// このプラグインは可視化されたデータを提供するので、true を返す\n"
"bool CanRender( void )\n"
"{\n"
"    return true;\n"
"}\n"

#. type: delimited block -
#: plugins.adoc:737
#, no-wrap
msgid ""
"// create the visualization data\n"
"SCENEGRAPH* Load( char const* aFileName )\n"
"{\n"
"    // For this demonstration we create a tetrahedron (tx1) consisting\n"
"    // of a SCENEGRAPH (VRML Transform) which in turn contains 4\n"
"    // SGSHAPE (VRML Shape) objects representing each of the sides of\n"
"    // the tetrahedron. Each Shape is associated with a color (SGAPPEARANCE)\n"
"    // and a SGFACESET (VRML Geometry->indexedFaceSet). Each SGFACESET is\n"
"    // associated with a vertex list (SGCOORDS), a per-vertex normals\n"
"    // list (SGNORMALS), and a coordinate index (SGCOORDINDEX). One shape\n"
"    // is used to represent each face so that we may use per-vertex-per-face\n"
"    // normals.\n"
"    //\n"
"    // The tetrahedron in turn is a child of a top level SCENEGRAPH (tx0)\n"
"    // which has a second SCENEGRAPH child (tx2) which is a transformation\n"
"    // of the tetrahedron tx1 (rotation + translation). This demonstrates\n"
"    // the reuse of components within the scene graph hierarchy.\n"
msgstr ""
"// 可視化データを作成する\n"
"SCENEGRAPH* Load( char const* aFileName )\n"
"{\n"
"    // このデモでは、四面体の各面をなす４つの SGSHAPE (VRML Shape) \n"
"    // オブジェクトを含んだ SCENEGRAPH (VRML Transform) から構成\n"
"    // される四面体 (tx1) を作ります。各 SGSHAPE は色 (SGAPPEARANCE) \n"
"    // と SGFACESET (VRML Geometry->indexedFaceSet) を伴います。\n"
"    // 各 SGFACESET は vertex list (SGCOORDS)、per-vertex normals \n"
"    // list (SGNORMALS) と coordinate index (SGCOORDINDEX) に紐付け\n"
"    // られています。\n"
"    // 頂点法線と面法線を使えるようにするため、一つのシェイプが各面を表すように\n"
"    // 使用されます。\n"
"    // \n"
"    // 連続した四面体は、四面体 tx1 (rotation + translation) のトランスフォームである\n"
"    // ２つ目の子供 SCENEGRAPH (tx2) を持つトップ レベル SCENEGRAPH (tx0) の\n"
"    // 子供です。これはシーン グラフ階層内でコンポーネントを再利用する デモとなって\n"
"    // います。\n"

#. type: delimited block -
#: plugins.adoc:749
#, no-wrap
msgid ""
"    // define the vertices of the tetrahedron\n"
"    // face 1: 0, 3, 1\n"
"    // face 2: 0, 2, 3\n"
"    // face 3: 1, 3, 2\n"
"    // face 4: 0, 1, 2\n"
"    double SQ2 = sqrt( 0.5 );\n"
"    SGPOINT vert[4];\n"
"    vert[0] = SGPOINT( 1.0, 0.0, -SQ2 );\n"
"    vert[1] = SGPOINT( -1.0, 0.0, -SQ2 );\n"
"    vert[2] = SGPOINT( 0.0, 1.0, SQ2 );\n"
"    vert[3] = SGPOINT( 0.0, -1.0, SQ2 );\n"
msgstr ""
"    // 四面体の頂点定義\n"
"    // 面 1: 0, 3, 1\n"
"    // 面 2: 0, 2, 3\n"
"    // 面 3: 1, 3, 2\n"
"    // 面 4: 0, 1, 2\n"
"    double SQ2 = sqrt( 0.5 );\n"
"    SGPOINT vert[4];\n"
"    vert[0] = SGPOINT( 1.0, 0.0, -SQ2 );\n"
"    vert[1] = SGPOINT( -1.0, 0.0, -SQ2 );\n"
"    vert[2] = SGPOINT( 0.0, 1.0, SQ2 );\n"
"    vert[3] = SGPOINT( 0.0, -1.0, SQ2 );\n"

#. type: delimited block -
#: plugins.adoc:755
#, no-wrap
msgid ""
"    // create the top level transform; this will hold all other\n"
"    // scenegraph objects; a transform may hold other transforms and\n"
"    // shapes\n"
"    IFSG_TRANSFORM* tx0 = new IFSG_TRANSFORM( true );\n"
msgstr ""
"    // トップ レベル トランスフォームを作成する; これは全ての異なった\n"
"    // scenegraph オブジェクトを保持するだろう; あるトランスフォームは\n"
"    // 別のトランスフォームとシェイプを保持してもよい\n"
"    IFSG_TRANSFORM* tx0 = new IFSG_TRANSFORM( true );\n"

#. type: delimited block -
#: plugins.adoc:758
#, no-wrap
msgid ""
"    // create the transform which will house the shapes\n"
"    IFSG_TRANSFORM* tx1 = new IFSG_TRANSFORM( tx0->GetRawPtr() );\n"
msgstr ""
"    // シェイプを保持するためのトランスフォームを作成する\n"
"    IFSG_TRANSFORM* tx1 = new IFSG_TRANSFORM( tx0->GetRawPtr() );\n"

#. type: delimited block -
#: plugins.adoc:762
#, no-wrap
msgid ""
"    // add a shape which we will use to define one face of the tetrahedron;\n"
"    // shapes hold facesets and appearances\n"
"    IFSG_SHAPE* shape = new IFSG_SHAPE( *tx1 );\n"
msgstr ""
"    // 四面体の一つの面を定義するために用いられるシェイプを追加する;\n"
"    // シェイプはファイス セットと外見 (appearance) を保持している\n"
"    IFSG_SHAPE* shape = new IFSG_SHAPE( *tx1 );\n"

#. type: delimited block -
#: plugins.adoc:766
#, no-wrap
msgid ""
"    // add a faceset; these contain coordinate lists, coordinate indices,\n"
"    // vertex lists, vertex indices, and may also contain color lists and\n"
"    // their indices.\n"
msgstr ""
"    // フェイス セットを追加する; これらは、座標リスト、座標位置、\n"
"    // 頂点リスト、頂点位置を含み、色のリストとその位置を\n"
"    // 含んでもよい\n"

#. type: delimited block -
#: plugins.adoc:768
#, no-wrap
msgid "    IFSG_FACESET* face = new IFSG_FACESET( *shape );\n"
msgstr "    IFSG_FACESET* face = new IFSG_FACESET( *shape );\n"

#. type: delimited block -
#: plugins.adoc:773
#, no-wrap
msgid ""
"    IFSG_COORDS* cp = new IFSG_COORDS( *face );\n"
"    cp->AddCoord( vert[0] );\n"
"    cp->AddCoord( vert[3] );\n"
"    cp->AddCoord( vert[1] );\n"
msgstr ""
"    IFSG_COORDS* cp = new IFSG_COORDS( *face );\n"
"    cp->AddCoord( vert[0] );\n"
"    cp->AddCoord( vert[3] );\n"
"    cp->AddCoord( vert[1] );\n"

#. type: delimited block -
#: plugins.adoc:782
#, no-wrap
msgid ""
"    // coordinate indices - note: enforce triangles;\n"
"    // in real plugins where it is not necessarily possible\n"
"    // to determine which side a triangle is visible from,\n"
"    // 2 point orders must be specified for each triangle\n"
"    IFSG_COORDINDEX* coordIdx = new IFSG_COORDINDEX( *face );\n"
"    coordIdx->AddIndex( 0 );\n"
"    coordIdx->AddIndex( 1 );\n"
"    coordIdx->AddIndex( 2 );\n"
msgstr ""
"    // 座標位置 - 注記: 強制的に三角形となる;\n"
"    // 実際のプラグインでは、三角形のどちらの面から\n"
"    // 見えるかを決定できるようにする必要はなく、\n"
"    // 2 点の順番で各三角形を指定しなければならない\n"
"    IFSG_COORDINDEX* coordIdx = new IFSG_COORDINDEX( *face );\n"
"    coordIdx->AddIndex( 0 );\n"
"    coordIdx->AddIndex( 1 );\n"
"    coordIdx->AddIndex( 2 );\n"

#. type: delimited block -
#: plugins.adoc:784
#, no-wrap
msgid "    // create an appearance; appearances are owned by shapes\n"
msgstr "    // 外見 (appearance) を作成する; 外見 (appearance) はマゼンタ色のシェイプによって\n"

#. type: delimited block -
#: plugins.adoc:791
#, no-wrap
msgid ""
"    // magenta\n"
"    IFSG_APPEARANCE* material = new IFSG_APPEARANCE( *shape);\n"
"    material->SetSpecular( 0.1, 0.0, 0.1 );\n"
"    material->SetDiffuse( 0.8, 0.0, 0.8 );\n"
"    material->SetAmbient( 0.2, 0.2, 0.2 );\n"
"    material->SetShininess( 0.2 );\n"
msgstr ""
"    // 所有される\n"
"    IFSG_APPEARANCE* material = new IFSG_APPEARANCE( *shape);\n"
"    material->SetSpecular( 0.1, 0.0, 0.1 );\n"
"    material->SetDiffuse( 0.8, 0.0, 0.8 );\n"
"    material->SetAmbient( 0.2, 0.2, 0.2 );\n"
"    material->SetShininess( 0.2 );\n"

#. type: delimited block -
#: plugins.adoc:798
#, no-wrap
msgid ""
"    // normals\n"
"    IFSG_NORMALS* np = new IFSG_NORMALS( *face );\n"
"    SGVECTOR nval = S3D::CalcTriNorm( vert[0], vert[3], vert[1] );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
msgstr ""
"    // 法線\n"
"    IFSG_NORMALS* np = new IFSG_NORMALS( *face );\n"
"    SGVECTOR nval = S3D::CalcTriNorm( vert[0], vert[3], vert[1] );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"

#. type: delimited block -
#: plugins.adoc:809
#, no-wrap
msgid ""
"    //\n"
"    // Shape2\n"
"    // Note: we reuse the IFSG* wrappers to create and manipulate new\n"
"    // data structures.\n"
"    //\n"
"    shape->NewNode( *tx1 );\n"
"    face->NewNode( *shape );\n"
"    coordIdx->NewNode( *face );\n"
"    cp->NewNode( *face );\n"
"    np->NewNode( *face );\n"
msgstr ""
"    //\n"
"    // シェイプ2\n"
"    // 注記: 新しい構造体を作成して操作するために\n"
"    //  IFSG* ラッパーを再利用する\n"
"    //\n"
"    shape->NewNode( *tx1 );\n"
"    face->NewNode( *shape );\n"
"    coordIdx->NewNode( *face );\n"
"    cp->NewNode( *face );\n"
"    np->NewNode( *face );\n"

#. type: delimited block -
#: plugins.adoc:814
#, no-wrap
msgid ""
"    // vertices\n"
"    cp->AddCoord( vert[0] );\n"
"    cp->AddCoord( vert[2] );\n"
"    cp->AddCoord( vert[3] );\n"
msgstr ""
"    // 頂点\n"
"    cp->AddCoord( vert[0] );\n"
"    cp->AddCoord( vert[2] );\n"
"    cp->AddCoord( vert[3] );\n"

#. type: delimited block -
#: plugins.adoc:819 plugins.adoc:850 plugins.adoc:882
#, no-wrap
msgid ""
"    // indices\n"
"    coordIdx->AddIndex( 0 );\n"
"    coordIdx->AddIndex( 1 );\n"
"    coordIdx->AddIndex( 2 );\n"
msgstr ""
"    // 位置\n"
"    coordIdx->AddIndex( 0 );\n"
"    coordIdx->AddIndex( 1 );\n"
"    coordIdx->AddIndex( 2 );\n"

#. type: delimited block -
#: plugins.adoc:831
#, no-wrap
msgid ""
"    // normals\n"
"    nval = S3D::CalcTriNorm( vert[0], vert[2], vert[3] );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    // color (red)\n"
"    material->NewNode( *shape );\n"
"    material->SetSpecular( 0.2, 0.0, 0.0 );\n"
"    material->SetDiffuse( 0.9, 0.0, 0.0 );\n"
"    material->SetAmbient( 0.2, 0.2, 0.2 );\n"
"    material->SetShininess( 0.1 );\n"
msgstr ""
"    // 法線\n"
"    nval = S3D::CalcTriNorm( vert[0], vert[2], vert[3] );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    // 色 (赤)\n"
"    material->NewNode( *shape );\n"
"    material->SetSpecular( 0.2, 0.0, 0.0 );\n"
"    material->SetDiffuse( 0.9, 0.0, 0.0 );\n"
"    material->SetAmbient( 0.2, 0.2, 0.2 );\n"
"    material->SetShininess( 0.1 );\n"

#. type: delimited block -
#: plugins.adoc:840
#, no-wrap
msgid ""
"    //\n"
"    // Shape3\n"
"    //\n"
"    shape->NewNode( *tx1 );\n"
"    face->NewNode( *shape );\n"
"    coordIdx->NewNode( *face );\n"
"    cp->NewNode( *face );\n"
"    np->NewNode( *face );\n"
msgstr ""
"    //\n"
"    // シェイプ3\n"
"    //\n"
"    shape->NewNode( *tx1 );\n"
"    face->NewNode( *shape );\n"
"    coordIdx->NewNode( *face );\n"
"    cp->NewNode( *face );\n"
"    np->NewNode( *face );\n"

#. type: delimited block -
#: plugins.adoc:845
#, no-wrap
msgid ""
"    // vertices\n"
"    cp->AddCoord( vert[1] );\n"
"    cp->AddCoord( vert[3] );\n"
"    cp->AddCoord( vert[2] );\n"
msgstr ""
"    // 頂点\n"
"    cp->AddCoord( vert[1] );\n"
"    cp->AddCoord( vert[3] );\n"
"    cp->AddCoord( vert[2] );\n"

#. type: delimited block -
#: plugins.adoc:856
#, no-wrap
msgid ""
"    // normals\n"
"    nval = S3D::CalcTriNorm( vert[1], vert[3], vert[2] );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
msgstr ""
"    // 法線\n"
"    nval = S3D::CalcTriNorm( vert[1], vert[3], vert[2] );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"

#. type: delimited block -
#: plugins.adoc:863
#, no-wrap
msgid ""
"    // color (green)\n"
"    material->NewNode( *shape );\n"
"    material->SetSpecular( 0.0, 0.1, 0.0 );\n"
"    material->SetDiffuse( 0.0, 0.9, 0.0 );\n"
"    material->SetAmbient( 0.2, 0.2, 0.2 );\n"
"    material->SetShininess( 0.1 );\n"
msgstr ""
"    // 色 (緑)\n"
"    material->NewNode( *shape );\n"
"    material->SetSpecular( 0.0, 0.1, 0.0 );\n"
"    material->SetDiffuse( 0.0, 0.9, 0.0 );\n"
"    material->SetAmbient( 0.2, 0.2, 0.2 );\n"
"    material->SetShininess( 0.1 );\n"

#. type: delimited block -
#: plugins.adoc:872
#, no-wrap
msgid ""
"    //\n"
"    // Shape4\n"
"    //\n"
"    shape->NewNode( *tx1 );\n"
"    face->NewNode( *shape );\n"
"    coordIdx->NewNode( *face );\n"
"    cp->NewNode( *face );\n"
"    np->NewNode( *face );\n"
msgstr ""
"    //\n"
"    // シェイプ4\n"
"    //\n"
"    shape->NewNode( *tx1 );\n"
"    face->NewNode( *shape );\n"
"    coordIdx->NewNode( *face );\n"
"    cp->NewNode( *face );\n"
"    np->NewNode( *face );\n"

#. type: delimited block -
#: plugins.adoc:877
#, no-wrap
msgid ""
"    // vertices\n"
"    cp->AddCoord( vert[0] );\n"
"    cp->AddCoord( vert[1] );\n"
"    cp->AddCoord( vert[2] );\n"
msgstr ""
"    // 頂点\n"
"    cp->AddCoord( vert[0] );\n"
"    cp->AddCoord( vert[1] );\n"
"    cp->AddCoord( vert[2] );\n"

#. type: delimited block -
#: plugins.adoc:888
#, no-wrap
msgid ""
"    // normals\n"
"    nval = S3D::CalcTriNorm( vert[0], vert[1], vert[2] );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
msgstr ""
"    // 法線\n"
"    nval = S3D::CalcTriNorm( vert[0], vert[1], vert[2] );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"
"    np->AddNormal( nval );\n"

#. type: delimited block -
#: plugins.adoc:895
#, no-wrap
msgid ""
"    // color (blue)\n"
"    material->NewNode( *shape );\n"
"    material->SetSpecular( 0.0, 0.0, 0.1 );\n"
"    material->SetDiffuse( 0.0, 0.0, 0.9 );\n"
"    material->SetAmbient( 0.2, 0.2, 0.2 );\n"
"    material->SetShininess( 0.1 );\n"
msgstr ""
"    // 色 (青)\n"
"    material->NewNode( *shape );\n"
"    material->SetSpecular( 0.0, 0.0, 0.1 );\n"
"    material->SetDiffuse( 0.0, 0.0, 0.9 );\n"
"    material->SetAmbient( 0.2, 0.2, 0.2 );\n"
"    material->SetShininess( 0.1 );\n"

#. type: delimited block -
#: plugins.adoc:901
#, no-wrap
msgid ""
"    // create a copy of the entire tetrahedron shifted Z+2 and rotated 2/3PI\n"
"    IFSG_TRANSFORM* tx2 = new IFSG_TRANSFORM( tx0->GetRawPtr() );\n"
"    tx2->AddRefNode( *tx1 );\n"
"    tx2->SetTranslation( SGPOINT( 0, 0, 2 ) );\n"
"    tx2->SetRotation( SGVECTOR( 0, 0, 1 ), M_PI*2.0/3.0 );\n"
msgstr ""
"    // Z+2 シフトされ、2/3PI 回転した完全な四面体のコピーを作成する\n"
"    IFSG_TRANSFORM* tx2 = new IFSG_TRANSFORM( tx0->GetRawPtr() );\n"
"    tx2->AddRefNode( *tx1 );\n"
"    tx2->SetTranslation( SGPOINT( 0, 0, 2 ) );\n"
"    tx2->SetRotation( SGVECTOR( 0, 0, 1 ), M_PI*2.0/3.0 );\n"

#. type: delimited block -
#: plugins.adoc:903
#, no-wrap
msgid "    SGNODE* data = tx0->GetRawPtr();\n"
msgstr "    SGNODE* data = tx0->GetRawPtr();\n"

#. type: delimited block -
#: plugins.adoc:914
#, no-wrap
msgid ""
"    // delete the wrappers\n"
"    delete shape;\n"
"    delete face;\n"
"    delete coordIdx;\n"
"    delete material;\n"
"    delete cp;\n"
"    delete np;\n"
"    delete tx0;\n"
"    delete tx1;\n"
"    delete tx2;\n"
msgstr ""
"    // ラッパーを削除する\n"
"    delete shape;\n"
"    delete face;\n"
"    delete coordIdx;\n"
"    delete material;\n"
"    delete cp;\n"
"    delete np;\n"
"    delete tx0;\n"
"    delete tx1;\n"
"    delete tx2;\n"

#. type: delimited block -
#: plugins.adoc:917
#, no-wrap
msgid ""
"    return (SCENEGRAPH*)data;\n"
"}\n"
msgstr ""
"    return (SCENEGRAPH*)data;\n"
"}\n"

#. type: Title ==
#: plugins.adoc:919
#, no-wrap
msgid "Application Programming Interface (API)"
msgstr "アプリケーション プログラミング インタフェース (API)"

#. type: Plain text
#: plugins.adoc:929
msgid ""
"Plugins are implemented via Application Programming Interface (API)  "
"implementations. Each Plugin Class has its specific API and in the 3D Plugin "
"tutorials we have seen examples of the implementation of the 3D Plugin API as "
"declared by the header `3d_plugin.h`. Plugins may also rely on other APIs defined "
"within the KiCad source tree; in the case of 3D plugins, all plugins which support "
"visualization of models must interact with the Scene Graph API as declared in the "
"header `ifsg_all.h` and its included headers."
msgstr ""
"プラグインはアプリケーション プログラミング インタフェース (API) の実装により開発さ"
"れます。各プラグイン クラスは固有の API を持っており、3D プラグイン チュートリアル"
"では `3d_plugin.h` ヘッダで宣言された 3D プラグイン API の実装例を見てきました。プ"
"ラグインはまた KiCad ソース ツリーで定義された別の API にも依存しています; 3D プラ"
"グインの例では、モデルの可視化をサポートする全てのプラグインは `ifsg_all.h` ヘッダ"
"とそれ自身が包んでいるヘッダとで宣言された Scene Graph API と密接に関わらなければな"
"りません。"

#. type: Plain text
#: plugins.adoc:933
msgid ""
"This section describes the details of available Plugin Class APIs and other KiCad "
"APIs which may be required for implementations of plugin classes."
msgstr ""
"この章では利用可能なプラグイン クラス API とプラグイン クラスの実装に必要と思われる"
"別の KiCad API の詳細について説明します。"

#. type: Title ===
#: plugins.adoc:934
#, no-wrap
msgid "Plugin Class APIs"
msgstr "プラグイン クラス API"

#. type: Plain text
#: plugins.adoc:943
msgid ""
"There is currently only one plugin class declared for KiCad: the 3D Plugin Class. "
"All KiCad plugin classes must implement a basic set of functions declared in the "
"header file `kicad_plugin.h`; these declarations are referred to as the Base Kicad "
"Plugin Class.  No implementation of the Base Kicad Plugin Class exists; the header "
"file exists purely to ensure that plugin developers implement these defined "
"functions in each plugin implementation."
msgstr ""
"今のところ、KiCad で宣言されているプラグイン クラスは次の一つだけです: 3D プラグイ"
"ン クラス。全ての KiCad プラグイン クラスは `kicad_plugin.h` で宣言されている基本的"
"な関数のセットを実装しなければなりません; これらの宣言はベース KiCad プラグイン ク"
"ラスとして参照されます。ベース KiCad プラグイン クラスの実装は存在していません; "
"ヘッダ ファイルはプラグイン開発者が各プラグインでこれらの定義済み関数を確実に実装す"
"るためだけに存在しています。"

#. type: Plain text
#: plugins.adoc:953
msgid ""
"Within KiCad, each instance of a Plugin Loader implements the API presented by a "
"plugin as though the Plugin Loader is a class providing the plugin's services. "
"This is achieved by the Plugin Loader class providing a public interface "
"containing function names which are similar to those implemented by the plugin; "
"the argument lists may vary to accommodate the need to inform the user of any "
"problems which may be encountered if, for example, no plugin is loaded. Internally "
"the Plugin Loader uses a stored pointer to each API function to invoke each "
"function on behalf of the user."
msgstr ""
"KiCadでは、プラグイン ローダーの各インスタンスはプラグインが公開する API を提供しま"
"す。プラグイン ローダーはプラグインのサービスを提供するクラスのようなものです。これ"
"はプラグインで実装されたものと同様な関数名を含んだパブリック インターフェイスをプラ"
"グイン ローダー クラスが提供することで実現されています; 引数リストは、例えばプラグ"
"インが読み込まれていないというような予見される問題をユーザーに知らせる必要に応じ"
"て、適宜変更しても構いません。内部的には、プラグイン ローダーはユーザーに代わって各"
"関数を呼び出すために各 API 関数へのストアド ポインタを使用します。"

#. type: Title ====
#: plugins.adoc:955
#, no-wrap
msgid "API: Base Kicad Plugin Class"
msgstr "API: ベース KiCad プラグイン クラス"

#. type: Plain text
#: plugins.adoc:963
msgid ""
"The Base Kicad Plugin Class is defined by the header file `kicad_plugin.h`.  This "
"header must be included in the declaration of all other plugin classes; for an "
"example see the 3D Plugin Class declaration in the header file `3d_plugin.h`. The "
"prototypes for these functions were briefly described in <<plugin-classes,Plugin "
"Classes>>. The API is implemented by the base plugin loader as defined in "
"`pluginldr.cpp`."
msgstr ""
"ベース KiCad プラグイン クラスはヘッダ ファイル `kicad_plugin.h` で定義されます。こ"
"のヘッダは全ての異なるプラグイン クラスの宣言に含まれなければなりません; 例として"
"ヘッダ ファイル `3d_plugin.h` で宣言された 3D プラグイン クラスを見てみましょう。こ"
"れらの関数のプロトタイプは <<plugin-classes,Plugin Classes>>内で簡潔に記述されてい"
"ます。API は `pluginldr.cpp` で定義されているようにベース プラグイン ローダーによっ"
"て提供されます。"

#. type: Plain text
#: plugins.adoc:973
msgid ""
"To help make sense of the functions required by the base KiCad plugin header we "
"must look at what happens in the base Plugin Loader class. The Plugin Loader class "
"declares a virtual function `Open()` which takes the full path to the plugin to be "
"loaded. The implementation of the `Open()` function within a specific plugin class "
"loader will initially invoke the protected `open()` function of the base plugin "
"loader; this base `open()` function attempts to find the address of each of the "
"required basic plugin functions; once the addresses of each function have been "
"retrieved, a number of checks are enforced:"
msgstr ""
"ベース KiCad プラグイン ヘッダで要求される関数を理解するには、ベース プラグイン "
"ローダー クラスで何が起こるのか調べる必要があります。プラグイン ローダー クラスは読"
"み込まれるプラグインのフルパスを引数とする virtual 関数 `Open()` を宣言します。特定"
"のプラグイン クラス ローダーでの`Open()` 関数の実装では、ベース プラグイン ローダー"
"の protected 関数 `open()` を呼び出します; このベース `open()` 関数は要求された基本"
"的なプラグインの関数それぞれのアドレスを見つけようとします; 各関数のアドレスが取得"
"されると、いくつかのチェックが実行されます:"

#. type: Plain text
#: plugins.adoc:978
msgid ""
"Plugin `GetKicadPluginClass()` is invoked and the result is compared to the Plugin "
"Class string provided by the Plugin Loader implementation; if these strings do not "
"match then the opened plugin is not intended for the Plugin Loader instance."
msgstr ""
"プラグイン `GetKicadPluginClass()` が呼び出されると、プラグイン ローダーが提供する"
"プラグイン クラス文字列との比較が行われます; もしこれらの文字列が一致しなければ、開"
"かれたプラグインはこのプラグイン ローダー インスタンス向けのものではありません。"

#. type: Plain text
#: plugins.adoc:980
msgid ""
"Plugin `GetClassVersion()` is invoked to retrieve the Plugin Class API Version "
"implemented by the plugin."
msgstr ""
"プラグイン `GetClassVersion()` はプラグインが実装しているプラグイン クラス API "
"Version を取得するために呼び出されます。"

#. type: Plain text
#: plugins.adoc:982
msgid ""
"Plugin Loader virtual `GetLoaderVersion()` function is invoked to retrieve the "
"Plugin Class API Version implemented by the loader."
msgstr ""
"プラグイン ローダー virtual 関数 `GetLoaderVersion()` はローダーが実装しているプラ"
"グイン クラス API Version を取得するために呼び出されます。"

#. type: Plain text
#: plugins.adoc:986
msgid ""
"The Plugin Class API Version reported by the plugin and the loader are required to "
"have the same Major Version number, otherwise they are considered incompatible. "
"This is the most basic version test and it is enforced by the base plugin loader."
msgstr ""
"プラグインとローダーが報告するプラグイン クラス API Version は同じメジャー バージョ"
"ン番号を持っている必要があります。もし違っていれば互換性はないと考えられます。これ"
"は最も基本的なバージョンのテストで、ベース プラグイン ローダーによって強制的に実行"
"されます。"

#. type: Plain text
#: plugins.adoc:992
msgid ""
"Plugin `CheckClassVersion()` is invoked with the Plugin Class API Version "
"information of the Plugin Loader; if the Plugin supports the given version then it "
"returns `true` to indicate success. If successful the loader creates a PluginInfo "
"string based on the results of `GetKicadPluginName()` and `GetPluginVersion()`, "
"and the plugin loading procedure continues within the Plugin Loader's `Open()` "
"implementation."
msgstr ""
"プラグイン `CheckClassVersion()` はプラグイン ローダーのプラグイン クラス API "
"Version information を呼び出します; もしプラグインが与えられたバージョンをサポート"
"していれば、成功を意味する `true` が返ります。成功した場合、ローダーは "
"`GetKicadPluginName()` と `GetPluginVersion()` の結果を基に PluginInfo 文字列を作成"
"し、plugin loading procedure がプラグイン ローダーの `Open()` 実装部の中で続けて実"
"行されます。"

#. type: Title ====
#: plugins.adoc:994
#, no-wrap
msgid "API: 3D Plugin Class"
msgstr "API: 3D プラグイン クラス"

#. type: Plain text
#: plugins.adoc:1001
msgid ""
"The 3D Plugin Class is declared by the header file `3d_plugin.h` and it extends "
"the required plugin functions as described in <<class-plugin-3d,Plugin Class: "
"PLUGIN_3D>>. The corresponding Plugin Loader is defined in `pluginldr3D.cpp` and "
"the loader implements the following public functions in addition to the required "
"API functions:"
msgstr ""
"3D プラグイン クラスはヘッダ ファイル `3d_plugin.h` で宣言されており、<<class-"
"plugin-3d,Plugin Class: PLUGIN_3D>> 内で記述されるような必要とされるプラグイン関数"
"を拡張します。対応するプラグイン ローダーは `pluginldr3D.cpp` 内で定義され、ロー"
"ダーは要求された API 関数に加えて public 関数を提供します。"

#. type: delimited block -
#: plugins.adoc:1006
#, no-wrap
msgid ""
"/* Open the plugin specified by the full path \"aFullFileName\" */\n"
"bool Open( const wxString& aFullFileName );\n"
msgstr ""
"/* フル パス \"aFullFileName\" で指定されたプラグインを開く */\n"
"bool Open( const wxString& aFullFileName );\n"

#. type: delimited block -
#: plugins.adoc:1009
#, no-wrap
msgid ""
"/* Close the currently opened plugin */\n"
"void Close( void );\n"
msgstr ""
"/* 現在開かれているプラグインを閉じる */\n"
"void Close( void );\n"

#. type: delimited block -
#: plugins.adoc:1013
#, no-wrap
msgid ""
"/* Retrieve the Plugin Class API Version implemented by this Plugin Loader */\n"
"void GetLoaderVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Revision, unsigned char* Patch ) const;\n"
msgstr ""
"/* このプラグイン ローダーが提供する プラグイン クラス API Version を取得する */\n"
"void GetLoaderVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Revision, unsigned char* Patch ) const;\n"

#. type: Plain text
#: plugins.adoc:1017
msgid ""
"The required 3D Plugin Class functions are exposed via the following functions:"
msgstr "要求された 3D プラグイン クラス 関数は、以下の関数を経由して公開されます:"

#. type: delimited block -
#: plugins.adoc:1022
#, no-wrap
msgid ""
"/* returns the Plugin Class or NULL if no plugin loaded */\n"
"char const* GetKicadPluginClass( void );\n"
msgstr ""
"/* プラグイン クラスを返す。プラグインが読み込まれていなければ NULL */\n"
"char const* GetKicadPluginClass( void );\n"

#. type: delimited block -
#: plugins.adoc:1026
#, no-wrap
msgid ""
"/* returns false if no plugin loaded */\n"
"bool GetClassVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Patch, unsigned char* Revision );\n"
msgstr ""
"/* プラグインが読み込まれていなければ false を返す */\n"
"bool GetClassVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Patch, unsigned char* Revision );\n"

#. type: delimited block -
#: plugins.adoc:1030
#, no-wrap
msgid ""
"/* returns false if the class version check fails or no plugin is loaded */\n"
"bool CheckClassVersion( unsigned char Major, unsigned char Minor,\n"
"    unsigned char Patch, unsigned char Revision );\n"
msgstr ""
"/* クラスのバージョン チェックが失敗またはプラグインが読み込まれていなければ、false を返す */\n"
"bool CheckClassVersion( unsigned char Major, unsigned char Minor,\n"
"    unsigned char Patch, unsigned char Revision );\n"

#. type: delimited block -
#: plugins.adoc:1033
#, no-wrap
msgid ""
"/* returns the Plugin Name or NULL if no plugin loaded */\n"
"const char* GetKicadPluginName( void );\n"
msgstr ""
"/* プラグイン名を返す。プラグインが読み込まれていなければ NULL */\n"
"const char* GetKicadPluginName( void );\n"

#. type: delimited block -
#: plugins.adoc:1040
#, no-wrap
msgid ""
"/*\n"
"   returns false if no plugin is loaded, otherwise the arguments\n"
"   contain the result of GetPluginVersion()\n"
" */\n"
"bool GetVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Patch, unsigned char* Revision );\n"
msgstr ""
"/*\n"
"   プラグインが読み込まれていない場合、false を返す。これ以外は、\n"
"   引数は GetPluginVersion() の戻り値に含まれる\n"
" */\n"
"bool GetVersion( unsigned char* Major, unsigned char* Minor,\n"
"    unsigned char* Patch, unsigned char* Revision );\n"

#. type: delimited block -
#: plugins.adoc:1050
#, no-wrap
msgid ""
"/*\n"
"   sets aPluginInfo to an empty string if no plugin is loaded,\n"
"   otherwise aPluginInfo is set to a string of the form:\n"
"   [NAME]:[MAJOR].[MINOR].[PATCH].[REVISION] where\n"
"   NAME = name provided by GetKicadPluginClass()\n"
"   MAJOR, MINOR, PATCH, REVISION = version information from \n"
"   GetPluginVersion()\n"
" */\n"
"void GetPluginInfo( std::string& aPluginInfo );\n"
msgstr ""
"/*\n"
"   プラグインが読み込まれていない場合、空文字列を aPluginInfo にセットする。\n"
"   これ以外は、下記フォームの文字列が aPluginInfo にセットされる:\n"
"   [NAME]:[MAJOR].[MINOR].[PATCH].[REVISION] ここで\n"
"   NAME = name provided by GetKicadPluginClass()\n"
"   MAJOR, MINOR, PATCH, REVISION = version information from \n"
"   GetPluginVersion()\n"
" */\n"
"void GetPluginInfo( std::string& aPluginInfo );\n"

#. type: Plain text
#: plugins.adoc:1053
msgid "In typical situations, the user would do the following:"
msgstr "典型的な状況では、ユーザーは以下のような使い方をするでしょう:"

#. type: Plain text
#: plugins.adoc:1055
msgid "Create an instance of `KICAD_PLUGIN_LDR_3D`."
msgstr "`KICAD_PLUGIN_LDR_3D` のインスタンスを作成する。"

#. type: Plain text
#: plugins.adoc:1058
msgid ""
"Invoke `Open( \"/path/to/myplugin.so\" )` to open a specific plugin.  The return "
"value must be checked to ensure that the plugin loaded as desired."
msgstr ""
"特定のプラグインを読み込むために `Open( \"/path/to/myplugin.so\" )` を呼ぶ。望み通"
"りのプラグインが読み込まれたかどうか確かめるためには、戻り値をチェックする必要があ"
"る。"

#. type: Plain text
#: plugins.adoc:1059
msgid "Invoke any of the 3D Plugin Class calls as exposed by `KICAD_PLUGIN_LDR_3D`."
msgstr ""
"`KICAD_PLUGIN_LDR_3D` で公開されているような、何れかの 3D プラグイン クラス コール"
"を呼ぶ。"

#. type: Plain text
#: plugins.adoc:1060
msgid "Invoke `Close()` to close (unlink) the plugin."
msgstr "プラグインを閉じる (リンクを外す) ために `Close()` を呼ぶ。"

#. type: Plain text
#: plugins.adoc:1061
msgid "Destroy the `KICAD_PLUGIN_LDR_3D` instance."
msgstr "`KICAD_PLUGIN_LDR_3D` インスタンスを破棄する。"

#. type: Title ===
#: plugins.adoc:1062
#, no-wrap
msgid "Scenegraph Class APIs"
msgstr "シーングラフ クラス API"

#. type: Plain text
#: plugins.adoc:1071
msgid ""
"The Scenegraph Class API is defined by the header `ifsg_all.h` and its included "
"headers. The API consists of a number of helper routines with the namespace `S3D` "
"as defined in `ifsg_api.h` and wrapper classes defined by the various `ifsg_*.h` "
"headers; the wrappers support the underlying scene graph classes which, taken "
"together, form a scene graph structure which is compatible with VRML2.0 static "
"scene graphs. The headers, structures, classes and their public functions are as "
"follows:"
msgstr ""
"シーングラフ クラス API はヘッダ ファイル `ifsg_all.h` とそれに含まれるヘッダで定義"
"されています。この API は、 `ifsg_api.h` で定義されている名前空間 `S3D` にある幾つ"
"かのヘルパー ルーチンと `ifsg_*.h` ヘッダ各種で定義されているラッパー クラスから"
"なっています; ラッパーは、VRML2.0 のスタティック シーン グラフと互換があるシーン グ"
"ラフ 構造体をまとめたものである、下層のシーン グラフ クラスをサポートします。ヘッ"
"ダ、構造体、クラスおよびその public 関数は次の通りです:"

#. type: Block title
#: plugins.adoc:1072
#, no-wrap
msgid "sg_version.h"
msgstr "sg_version.h"

#. type: delimited block -
#: plugins.adoc:1081
#, no-wrap
msgid ""
"/*\n"
"   Defines version information of the SceneGraph Classes.\n"
"   All plugins which use the scenegraph class should include this header\n"
"   and check the version information against the version reported by\n"
"   S3D::GetLibVersion() to ensure compatibility\n"
" */\n"
msgstr ""
"/*\n"
"   シーングラフ クラスのバージョン情報を定義する。\n"
"   シーングラフ クラスで使用される全てのクラスは本ヘッダを含む必要があり、\n"
"   また互換性を保証するため S3D::GetLibVersion() によって報告される\n"
"   バージョンに対してバージョン情報チェックを行わなければならない。\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1086
#, no-wrap
msgid ""
"#define KICADSG_VERSION_MAJOR         2\n"
"#define KICADSG_VERSION_MINOR         0\n"
"#define KICADSG_VERSION_PATCH         0\n"
"#define KICADSG_VERSION_REVISION      0\n"
msgstr ""
"#define KICADSG_VERSION_MAJOR         2\n"
"#define KICADSG_VERSION_MINOR         0\n"
"#define KICADSG_VERSION_PATCH         0\n"
"#define KICADSG_VERSION_REVISION      0\n"

#. type: Block title
#: plugins.adoc:1089
#, no-wrap
msgid "sg_types.h"
msgstr "sg_types.h"

#. type: delimited block -
#: plugins.adoc:1096
#, no-wrap
msgid ""
"/*\n"
"   Defines the SceneGraph Class Types; these types\n"
"   are closely related to VRML2.0 node types.\n"
" */\n"
msgstr ""
"/*\n"
"   シーングラフ クラス タイプを定義する; これらのタイプは\n"
"   VRML2.0 ノード タイプと密接な関係がある。\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1113
#, no-wrap
msgid ""
"namespace S3D\n"
"{\n"
"    enum SGTYPES\n"
"    {\n"
"        SGTYPE_TRANSFORM = 0,\n"
"        SGTYPE_APPEARANCE,\n"
"        SGTYPE_COLORS,\n"
"        SGTYPE_COLORINDEX,\n"
"        SGTYPE_FACESET,\n"
"        SGTYPE_COORDS,\n"
"        SGTYPE_COORDINDEX,\n"
"        SGTYPE_NORMALS,\n"
"        SGTYPE_SHAPE,\n"
"        SGTYPE_END\n"
"    };\n"
"};\n"
msgstr ""
"namespace S3D\n"
"{\n"
"    enum SGTYPES\n"
"    {\n"
"        SGTYPE_TRANSFORM = 0,\n"
"        SGTYPE_APPEARANCE,\n"
"        SGTYPE_COLORS,\n"
"        SGTYPE_COLORINDEX,\n"
"        SGTYPE_FACESET,\n"
"        SGTYPE_COORDS,\n"
"        SGTYPE_COORDINDEX,\n"
"        SGTYPE_NORMALS,\n"
"        SGTYPE_SHAPE,\n"
"        SGTYPE_END\n"
"    };\n"
"};\n"

#. type: Plain text
#: plugins.adoc:1117
msgid ""
"The `sg_base.h` header contains declarations of basic data types used by the "
"scenegraph classes."
msgstr ""
"`sg_base.h` ヘッダはシーングラフ クラスで使われる基本的なデータ型の宣言を含んでい"
"る。"

#. type: Block title
#: plugins.adoc:1118
#, no-wrap
msgid "sg_base.h"
msgstr "sg_base.h"

#. type: delimited block -
#: plugins.adoc:1126
#, no-wrap
msgid ""
"/*\n"
"    This is an RGB color model equivalent to the VRML2.0\n"
"    RGB model where each color may have a value within the\n"
"    range [0..1].\n"
" */\n"
msgstr ""
"/*\n"
"    これは、各色が範囲 [0..1] の数を持つ \n"
"    VRML2.0 RGB モデルと同等な RGB \n"
"    色モデルである。\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1132
#, no-wrap
msgid ""
"class SGCOLOR\n"
"{\n"
"public:\n"
"    SGCOLOR();\n"
"    SGCOLOR( float aRVal, float aGVal, float aBVal );\n"
msgstr ""
"class SGCOLOR\n"
"{\n"
"public:\n"
"    SGCOLOR();\n"
"    SGCOLOR( float aRVal, float aGVal, float aBVal );\n"

#. type: delimited block -
#: plugins.adoc:1136
#, no-wrap
msgid ""
"    void GetColor( float& aRedVal, float& aGreenVal, float& aBlueVal ) const;\n"
"    void GetColor( SGCOLOR& aColor ) const;\n"
"    void GetColor( SGCOLOR* aColor ) const;\n"
msgstr ""
"    void GetColor( float& aRedVal, float& aGreenVal, float& aBlueVal ) const;\n"
"    void GetColor( SGCOLOR& aColor ) const;\n"
"    void GetColor( SGCOLOR* aColor ) const;\n"

#. type: delimited block -
#: plugins.adoc:1141
#, no-wrap
msgid ""
"    bool SetColor( float aRedVal, float aGreenVal, float aBlueVal );\n"
"    bool SetColor( const SGCOLOR& aColor );\n"
"    bool SetColor( const SGCOLOR* aColor );\n"
"};\n"
msgstr ""
"    bool SetColor( float aRedVal, float aGreenVal, float aBlueVal );\n"
"    bool SetColor( const SGCOLOR& aColor );\n"
"    bool SetColor( const SGCOLOR* aColor );\n"
"};\n"

#. type: delimited block -
#: plugins.adoc:1149
#, no-wrap
msgid ""
"class SGPOINT\n"
"{\n"
"public:\n"
"    double x;\n"
"    double y;\n"
"    double z;\n"
msgstr ""
"class SGPOINT\n"
"{\n"
"public:\n"
"    double x;\n"
"    double y;\n"
"    double z;\n"

#. type: delimited block -
#: plugins.adoc:1153
#, no-wrap
msgid ""
"public:\n"
"    SGPOINT();\n"
"    SGPOINT( double aXVal, double aYVal, double aZVal );\n"
msgstr ""
"public:\n"
"    SGPOINT();\n"
"    SGPOINT( double aXVal, double aYVal, double aZVal );\n"

#. type: delimited block -
#: plugins.adoc:1157
#, no-wrap
msgid ""
"    void GetPoint( double& aXVal, double& aYVal, double& aZVal );\n"
"    void GetPoint( SGPOINT& aPoint );\n"
"    void GetPoint( SGPOINT* aPoint );\n"
msgstr ""
"    void GetPoint( double& aXVal, double& aYVal, double& aZVal );\n"
"    void GetPoint( SGPOINT& aPoint );\n"
"    void GetPoint( SGPOINT* aPoint );\n"

#. type: delimited block -
#: plugins.adoc:1161
#, no-wrap
msgid ""
"    void SetPoint( double aXVal, double aYVal, double aZVal );\n"
"    void SetPoint( const SGPOINT& aPoint );\n"
"};\n"
msgstr ""
"    void SetPoint( double aXVal, double aYVal, double aZVal );\n"
"    void SetPoint( const SGPOINT& aPoint );\n"
"};\n"

#. type: delimited block -
#: plugins.adoc:1173
#, no-wrap
msgid ""
"/*\n"
"    A SGVECTOR has 3 components (x,y,z) similar to a point; however\n"
"    a vector ensures that the stored values are normalized and\n"
"    prevents direct manipulation of the component variables.\n"
" */\n"
"class SGVECTOR\n"
"{\n"
"public:\n"
"    SGVECTOR();\n"
"    SGVECTOR( double aXVal, double aYVal, double aZVal );\n"
msgstr ""
"/*\n"
"    SGVECTOR は点と同じく３つの成分 (x,y,z) を持っています; しかしながら\n"
"    ベクトルは保存された値が正規化されていることが保証されており、\n"
"    成分の値を直接操作できないようになっています。\n"
" */\n"
"class SGVECTOR\n"
"{\n"
"public:\n"
"    SGVECTOR();\n"
"    SGVECTOR( double aXVal, double aYVal, double aZVal );\n"

#. type: delimited block -
#: plugins.adoc:1175
#, no-wrap
msgid "    void GetVector( double& aXVal, double& aYVal, double& aZVal ) const;\n"
msgstr "    void GetVector( double& aXVal, double& aYVal, double& aZVal ) const;\n"

#. type: delimited block -
#: plugins.adoc:1178
#, no-wrap
msgid ""
"    void SetVector( double aXVal, double aYVal, double aZVal );\n"
"    void SetVector( const SGVECTOR& aVector );\n"
msgstr ""
"    void SetVector( double aXVal, double aYVal, double aZVal );\n"
"    void SetVector( const SGVECTOR& aVector );\n"

#. type: delimited block -
#: plugins.adoc:1181
#, no-wrap
msgid ""
"    SGVECTOR& operator=( const SGVECTOR& source );\n"
"};\n"
msgstr ""
"    SGVECTOR& operator=( const SGVECTOR& source );\n"
"};\n"

#. type: Plain text
#: plugins.adoc:1188
msgid ""
"The `IFSG_NODE` class is the base class for all scenegraph nodes. All scenegraph "
"objects implement the public functions of this class but in some cases a "
"particular function may have no meaning for a specific class."
msgstr ""
"`IFSG_NODE` クラスは全てのシーングラフ ノードの基本クラスです。全てのシーングラフ "
"オブジェクトはこのクラスの public 関数として実装されますが、いくつかのケースでは、"
"ある関数は特定のクラスでは意味がないかも知れません。"

#. type: Block title
#: plugins.adoc:1189
#, no-wrap
msgid "ifsg_node.h"
msgstr "ifsg_node.h"

#. type: delimited block -
#: plugins.adoc:1197
#, no-wrap
msgid ""
"class IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_NODE();\n"
"    virtual ~IFSG_NODE();\n"
msgstr ""
"class IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_NODE();\n"
"    virtual ~IFSG_NODE();\n"

#. type: delimited block -
#: plugins.adoc:1203
#, no-wrap
msgid ""
"    /**\n"
"     * Function Destroy\n"
"     * deletes the scenegraph object held by this wrapper\n"
"     */\n"
"    void Destroy( void );\n"
msgstr ""
"    /**\n"
"     * Destroy 関数\n"
"     * このラッパーで保持されているシーングラフ オブジェクトを削除する\n"
"     */\n"
"    void Destroy( void );\n"

#. type: delimited block -
#: plugins.adoc:1209
#, no-wrap
msgid ""
"    /**\n"
"     * Function Attach\n"
"     * associates a given SGNODE* with this wrapper\n"
"     */\n"
"    virtual bool Attach( SGNODE* aNode ) = 0;\n"
msgstr ""
"    /**\n"
"     * Attach 関数\n"
"     * このラッパーに SGNODE* を関連付ける\n"
"     */\n"
"    virtual bool Attach( SGNODE* aNode ) = 0;\n"

#. type: delimited block -
#: plugins.adoc:1216
#, no-wrap
msgid ""
"    /**\n"
"     * Function NewNode\n"
"     * creates a new node to associate with this wrapper\n"
"     */\n"
"    virtual bool NewNode( SGNODE* aParent ) = 0;\n"
"    virtual bool NewNode( IFSG_NODE& aParent ) = 0;\n"
msgstr ""
"    /**\n"
"     * NewNode 関数\n"
"     * このラッパーに関連付ける新しいノードを作成する\n"
"     */\n"
"    virtual bool NewNode( SGNODE* aParent ) = 0;\n"
"    virtual bool NewNode( IFSG_NODE& aParent ) = 0;\n"

#. type: delimited block -
#: plugins.adoc:1222
#, no-wrap
msgid ""
"    /**\n"
"     * Function GetRawPtr()\n"
"     * returns the raw internal SGNODE pointer\n"
"     */\n"
"    SGNODE* GetRawPtr( void );\n"
msgstr ""
"    /**\n"
"     * GetRawPtr() 関数\n"
"     * 元々の内部 SGNODE ポインタを返す\n"
"     */\n"
"    SGNODE* GetRawPtr( void );\n"

#. type: delimited block -
#: plugins.adoc:1228
#, no-wrap
msgid ""
"    /**\n"
"     * Function GetNodeType\n"
"     * returns the type of this node instance\n"
"     */\n"
"    S3D::SGTYPES GetNodeType( void ) const;\n"
msgstr ""
"    /**\n"
"     * GetNodeType 関数\n"
"     * このノード インスタンスのタイプを返す\n"
"     */\n"
"    S3D::SGTYPES GetNodeType( void ) const;\n"

#. type: delimited block -
#: plugins.adoc:1236
#, no-wrap
msgid ""
"    /**\n"
"     * Function GetParent\n"
"     * returns a pointer to the parent SGNODE of this object\n"
"     * or NULL if the object has no parent (ie. top level transform)\n"
"     * or if the wrapper is not currently associated with an SGNODE.\n"
"     */\n"
"    SGNODE* GetParent( void ) const;\n"
msgstr ""
"    /**\n"
"     * GetParent 関数\n"
"     * このオブジェクトの親 SGNODE へのポインタを返す。\n"
"     * もしオブジェクトが親を持っていない (例. トップ レベル transform) か、\n"
"     * ラッパーが現在の SGNODE と関連付けられていない場合は NULL\n"
"     */\n"
"    SGNODE* GetParent( void ) const;\n"

#. type: delimited block -
#: plugins.adoc:1247
#, no-wrap
msgid ""
"    /**\n"
"     * Function SetParent\n"
"     * sets the parent SGNODE of this object.\n"
"     *\n"
"     * @param aParent [in] is the desired parent node\n"
"     * @return true if the operation succeeds; false if\n"
"     * the given node is not allowed to be a parent to\n"
"     * the derived object.\n"
"     */\n"
"    bool SetParent( SGNODE* aParent );\n"
msgstr ""
"    /**\n"
"     * SetParent 関数\n"
"     * このオブジェクトの親 SGNODE をセットする。\n"
"     *\n"
"     * @param aParent [in] はセットしたい親ノード\n"
"     * @return 関数が成功した場合は true; 与えられた\n"
"     * ノードが派生オブジェクトへのペアレントを許されて\n"
"     * いない場合は false\n"
"     */\n"
"    bool SetParent( SGNODE* aParent );\n"

#. type: delimited block -
#: plugins.adoc:1254
#, no-wrap
msgid ""
"    /**\n"
"     * Function GetNodeTypeName\n"
"     * returns the text representation of the node type\n"
"     * or NULL if the node somehow has an invalid type\n"
"     */\n"
"    const char * GetNodeTypeName( S3D::SGTYPES aNodeType ) const;\n"
msgstr ""
"    /**\n"
"     * GetNodeTypeName 関数\n"
"     * ノード タイプを表すテキストを返す。\n"
"     * もし何故かノードが無効なタイプであれば NULL\n"
"     */\n"
"    const char * GetNodeTypeName( S3D::SGTYPES aNodeType ) const;\n"

#. type: delimited block -
#: plugins.adoc:1264
#, no-wrap
msgid ""
"    /**\n"
"     * Function AddRefNode\n"
"     * adds a reference to an existing node which is not owned by\n"
"     * (not a child of) this node.\n"
"     *\n"
"     * @return true on success\n"
"     */\n"
"    bool AddRefNode( SGNODE* aNode );\n"
"    bool AddRefNode( IFSG_NODE& aNode );\n"
msgstr ""
"    /**\n"
"     * AddRefNode 関数\n"
"     * このノードが所有していない (子ノードではない) \n"
"     * 既存ノードへの参照を追加する。\n"
"     *\n"
"     * @return 成功した場合は true\n"
"     */\n"
"    bool AddRefNode( SGNODE* aNode );\n"
"    bool AddRefNode( IFSG_NODE& aNode );\n"

#. type: delimited block -
#: plugins.adoc:1274
#, no-wrap
msgid ""
"    /**\n"
"     * Function AddChildNode\n"
"     * adds a node as a child owned by this node.\n"
"     *\n"
"     * @return true on success\n"
"     */\n"
"    bool AddChildNode( SGNODE* aNode );\n"
"    bool AddChildNode( IFSG_NODE& aNode );\n"
"};\n"
msgstr ""
"    /**\n"
"     * AddChildNode 関数\n"
"     * このノードが所有する子ノードとして追加する。\n"
"     *\n"
"     * @return 成功した場合は true\n"
"     */\n"
"    bool AddChildNode( SGNODE* aNode );\n"
"    bool AddChildNode( IFSG_NODE& aNode );\n"
"};\n"

#. type: Plain text
#: plugins.adoc:1282
msgid ""
"`IFSG_TRANSFORM` is similar to a VRML2.0 Transform node; it may contain any number "
"of child IFSG_SHAPE and IFSG_TRANSFORM nodes and any number of referenced "
"IFSG_SHAPE and IFSG_TRANSFORM nodes.  A valid scenegraph must have a single "
"`IFSG_TRANSFORM` object as a root."
msgstr ""
"`IFSG_TRANSFORM` は VRML2.0 Transform ノードと同等です; これは、子ノード "
"IFSG_SHAPE と IFSG_TRANSFORM および参照ノード IFSG_SHAPE と IFSG_TRANSFORM を大量に"
"含んでいます。有効なシーングラフは、ルートに単一の `IFSG_TRANSFORM` オブジェクトを"
"持っている必要があります。"

#. type: Block title
#: plugins.adoc:1283
#, no-wrap
msgid "ifsg_transform.h"
msgstr "ifsg_transform.h"

#. type: delimited block -
#: plugins.adoc:1290
#, no-wrap
msgid ""
"/**\n"
" * Class IFSG_TRANSFORM\n"
" * is the wrapper for the VRML compatible TRANSFORM block class SCENEGRAPH\n"
" */\n"
msgstr ""
"/**\n"
" * IFSG_TRANSFORM クラス\n"
" * VRML 互換 TRANSFORM ブロック クラス SCENEGRAPH のラッパー\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1296
#, no-wrap
msgid ""
"class IFSG_TRANSFORM : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_TRANSFORM( bool create );\n"
"    IFSG_TRANSFORM( SGNODE* aParent );\n"
msgstr ""
"class IFSG_TRANSFORM : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_TRANSFORM( bool create );\n"
"    IFSG_TRANSFORM( SGNODE* aParent );\n"

#. type: delimited block -
#: plugins.adoc:1303
#, no-wrap
msgid ""
"    bool SetScaleOrientation( const SGVECTOR& aScaleAxis, double aAngle );\n"
"    bool SetRotation( const SGVECTOR& aRotationAxis, double aAngle );\n"
"    bool SetScale( const SGPOINT& aScale );\n"
"    bool SetScale( double aScale );\n"
"    bool SetCenter( const SGPOINT& aCenter );\n"
"    bool SetTranslation( const SGPOINT& aTranslation );\n"
msgstr ""
"    bool SetScaleOrientation( const SGVECTOR& aScaleAxis, double aAngle );\n"
"    bool SetRotation( const SGVECTOR& aRotationAxis, double aAngle );\n"
"    bool SetScale( const SGPOINT& aScale );\n"
"    bool SetScale( double aScale );\n"
"    bool SetCenter( const SGPOINT& aCenter );\n"
"    bool SetTranslation( const SGPOINT& aTranslation );\n"

#. type: delimited block -
#: plugins.adoc:1306 plugins.adoc:1330 plugins.adoc:1412
#, no-wrap
msgid ""
"    /* various base class functions not shown here */\n"
"};\n"
msgstr ""
"    /* いくつかのベース クラス関数はここにありません */\n"
"};\n"

#. type: Plain text
#: plugins.adoc:1312
msgid ""
"`IFSG_SHAPE` is similar to a VRML2.0 Shape node; it must contain a single child or "
"reference FACESET node and may contain a single child or reference APPEARANCE node."
msgstr ""
"`IFSG_SHAPE` は VRML2.0 シェイプ ノードと同等です; これは、単独の子ノードあるいは参"
"照ノード FACESET を含んでいる必要があります。また、単独の子ノードあるいは参照ノー"
"ド APPEARANCE を含んでいても構いません。"

#. type: Block title
#: plugins.adoc:1313
#, no-wrap
msgid "ifsg_shape.h"
msgstr "ifsg_shape.h"

#. type: delimited block -
#: plugins.adoc:1320
#, no-wrap
msgid ""
"/**\n"
" * Class IFSG_SHAPE\n"
" * is the wrapper for the SGSHAPE class\n"
" */\n"
msgstr ""
"/**\n"
" * IFSG_SHAPE クラス\n"
" * SGSHAPE クラスのラッパー\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1327
#, no-wrap
msgid ""
"class IFSG_SHAPE : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_SHAPE( bool create );\n"
"    IFSG_SHAPE( SGNODE* aParent );\n"
"    IFSG_SHAPE( IFSG_NODE& aParent );\n"
msgstr ""
"class IFSG_SHAPE : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_SHAPE( bool create );\n"
"    IFSG_SHAPE( SGNODE* aParent );\n"
"    IFSG_SHAPE( IFSG_NODE& aParent );\n"

#. type: Plain text
#: plugins.adoc:1336
msgid ""
"`IFSG_APPEARANCE` is similar to a VRML2.0 Appearance node, however, at the moment "
"it only represents the equivalent of an Appearance node containing a Material node."
msgstr ""
"`IFSG_APPEARANCE` は VRML2.0 Appearance ノードと同等です。しかしながら、今のところ "
"Material ノードを含んだ Appearance ノードと同じ意味しか持っていません。"

#. type: Block title
#: plugins.adoc:1337
#, no-wrap
msgid "ifsg_appearance.h"
msgstr "ifsg_appearance.h"

#. type: delimited block -
#: plugins.adoc:1346
#, no-wrap
msgid ""
"class IFSG_APPEARANCE : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_APPEARANCE( bool create );\n"
"    IFSG_APPEARANCE( SGNODE* aParent );\n"
"    IFSG_APPEARANCE( IFSG_NODE& aParent );\n"
msgstr ""
"class IFSG_APPEARANCE : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_APPEARANCE( bool create );\n"
"    IFSG_APPEARANCE( SGNODE* aParent );\n"
"    IFSG_APPEARANCE( IFSG_NODE& aParent );\n"

#. type: delimited block -
#: plugins.adoc:1350
#, no-wrap
msgid ""
"    bool SetEmissive( float aRVal, float aGVal, float aBVal );\n"
"    bool SetEmissive( const SGCOLOR* aRGBColor );\n"
"    bool SetEmissive( const SGCOLOR& aRGBColor );\n"
msgstr ""
"    bool SetEmissive( float aRVal, float aGVal, float aBVal );\n"
"    bool SetEmissive( const SGCOLOR* aRGBColor );\n"
"    bool SetEmissive( const SGCOLOR& aRGBColor );\n"

#. type: delimited block -
#: plugins.adoc:1354
#, no-wrap
msgid ""
"    bool SetDiffuse( float aRVal, float aGVal, float aBVal );\n"
"    bool SetDiffuse( const SGCOLOR* aRGBColor );\n"
"    bool SetDiffuse( const SGCOLOR& aRGBColor );\n"
msgstr ""
"    bool SetDiffuse( float aRVal, float aGVal, float aBVal );\n"
"    bool SetDiffuse( const SGCOLOR* aRGBColor );\n"
"    bool SetDiffuse( const SGCOLOR& aRGBColor );\n"

#. type: delimited block -
#: plugins.adoc:1358
#, no-wrap
msgid ""
"    bool SetSpecular( float aRVal, float aGVal, float aBVal );\n"
"    bool SetSpecular( const SGCOLOR* aRGBColor );\n"
"    bool SetSpecular( const SGCOLOR& aRGBColor );\n"
msgstr ""
"    bool SetSpecular( float aRVal, float aGVal, float aBVal );\n"
"    bool SetSpecular( const SGCOLOR* aRGBColor );\n"
"    bool SetSpecular( const SGCOLOR& aRGBColor );\n"

#. type: delimited block -
#: plugins.adoc:1362
#, no-wrap
msgid ""
"    bool SetAmbient( float aRVal, float aGVal, float aBVal );\n"
"    bool SetAmbient( const SGCOLOR* aRGBColor );\n"
"    bool SetAmbient( const SGCOLOR& aRGBColor );\n"
msgstr ""
"    bool SetAmbient( float aRVal, float aGVal, float aBVal );\n"
"    bool SetAmbient( const SGCOLOR* aRGBColor );\n"
"    bool SetAmbient( const SGCOLOR& aRGBColor );\n"

#. type: delimited block -
#: plugins.adoc:1365
#, no-wrap
msgid ""
"    bool SetShininess( float aShininess );\n"
"    bool SetTransparency( float aTransparency );\n"
msgstr ""
"    bool SetShininess( float aShininess );\n"
"    bool SetTransparency( float aTransparency );\n"

#. type: delimited block -
#: plugins.adoc:1367 plugins.adoc:1436 plugins.adoc:1474 plugins.adoc:1510
#: plugins.adoc:1545
#, no-wrap
msgid "    /* various base class functions not shown here */\n"
msgstr "    /* いくつかのベース クラス関数はここにありません */\n"

#. type: delimited block -
#: plugins.adoc:1370
#, no-wrap
msgid ""
"    /* the following functions make no sense within an\n"
"       appearance node and always return a failure code\n"
msgstr ""
"    /* 以下の関数は appearance ノードでは意味がありません。\n"
"       また、常に失敗を表すコードを返します。\n"

#. type: delimited block -
#: plugins.adoc:1377 plugins.adoc:1446 plugins.adoc:1484 plugins.adoc:1520
#: plugins.adoc:1555
#, no-wrap
msgid ""
"        bool AddRefNode( SGNODE* aNode );\n"
"        bool AddRefNode( IFSG_NODE& aNode );\n"
"        bool AddChildNode( SGNODE* aNode );\n"
"        bool AddChildNode( IFSG_NODE& aNode );\n"
"     */\n"
"};\n"
msgstr ""
"        bool AddRefNode( SGNODE* aNode );\n"
"        bool AddRefNode( IFSG_NODE& aNode );\n"
"        bool AddChildNode( SGNODE* aNode );\n"
"        bool AddChildNode( IFSG_NODE& aNode );\n"
"     */\n"
"};\n"

#. type: Plain text
#: plugins.adoc:1388
msgid ""
"`IFSG_FACESET` is similar to a VRML2.0 Geometry node which contains an "
"IndexedFaceSet node.  It must contain a single child or reference COORDS node, a "
"single child COORDINDEX node, and a single child or reference NORMALS node; in "
"addition there may be a single child or reference COLORS node.  A simplistic "
"normals calculation function is provided to aid the user in assigning normal "
"values to surfaces. The deviations from the VRML2.0 analogue are as follows:"
msgstr ""
"`IFSG_FACESET` は IndexedFaceSet ノードを含んだ VRML2.0 Geometry ノードと同等です。"
"これは、単独の子ノードあるいは参照ノード COORDS、単独の子ノード  COORDINDEX、単独の"
"子ノードあるいは参照ノード NORMALS を含んでいる必要があります。さらに、単独の子ノー"
"ドあるいは参照ノード COLORS を含んでいても構いません。ユーザーが面に法線を配置でき"
"るように、単純化された法線を計算する関数が用意されています。VRML2.0 同等と異なって"
"いる部分は次のとおりです:"

#. type: Plain text
#: plugins.adoc:1390
msgid "Normals are always per-vertex."
msgstr "法線は常に頂点毎である。"

#. type: Plain text
#: plugins.adoc:1391
msgid "Colors are always per vertex."
msgstr "色は常に頂点毎である。"

#. type: Plain text
#: plugins.adoc:1392
msgid "The coordinate index set must describe triangular faces only."
msgstr "座標値の集合は三角形の面だけを記述しなければならない。"

#. type: Block title
#: plugins.adoc:1393
#, no-wrap
msgid "ifsg_faceset.h"
msgstr "ifsg_faceset.h"

#. type: delimited block -
#: plugins.adoc:1400
#, no-wrap
msgid ""
"/**\n"
" * Class IFSG_FACESET\n"
" * is the wrapper for the SGFACESET class\n"
" */\n"
msgstr ""
"/**\n"
" * IFSG_FACESET クラス\n"
" * SGFACESET クラスのラッパー\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1407
#, no-wrap
msgid ""
"class IFSG_FACESET : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_FACESET( bool create );\n"
"    IFSG_FACESET( SGNODE* aParent );\n"
"    IFSG_FACESET( IFSG_NODE& aParent );\n"
msgstr ""
"class IFSG_FACESET : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_FACESET( bool create );\n"
"    IFSG_FACESET( SGNODE* aParent );\n"
"    IFSG_FACESET( IFSG_NODE& aParent );\n"

#. type: delimited block -
#: plugins.adoc:1409
#, no-wrap
msgid "    bool CalcNormals( SGNODE** aPtr );\n"
msgstr "    bool CalcNormals( SGNODE** aPtr );\n"

#. type: Block title
#: plugins.adoc:1415
#, no-wrap
msgid "ifsg_coords.h"
msgstr "ifsg_coords.h"

#. type: delimited block -
#: plugins.adoc:1422
#, no-wrap
msgid ""
"/**\n"
" * Class IFSG_COORDS\n"
" * is the wrapper for SGCOORDS\n"
" */\n"
msgstr ""
"/**\n"
" * IFSG_COORDS クラス\n"
" * SGCOORDS のラッパー\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1429
#, no-wrap
msgid ""
"class IFSG_COORDS : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_COORDS( bool create );\n"
"    IFSG_COORDS( SGNODE* aParent );\n"
"    IFSG_COORDS( IFSG_NODE& aParent );\n"
msgstr ""
"class IFSG_COORDS : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_COORDS( bool create );\n"
"    IFSG_COORDS( SGNODE* aParent );\n"
"    IFSG_COORDS( IFSG_NODE& aParent );\n"

#. type: delimited block -
#: plugins.adoc:1434
#, no-wrap
msgid ""
"    bool GetCoordsList( size_t& aListSize, SGPOINT*& aCoordsList );\n"
"    bool SetCoordsList( size_t aListSize, const SGPOINT* aCoordsList );\n"
"    bool AddCoord( double aXValue, double aYValue, double aZValue );\n"
"    bool AddCoord( const SGPOINT& aPoint );\n"
msgstr ""
"    bool GetCoordsList( size_t& aListSize, SGPOINT*& aCoordsList );\n"
"    bool SetCoordsList( size_t aListSize, const SGPOINT* aCoordsList );\n"
"    bool AddCoord( double aXValue, double aYValue, double aZValue );\n"
"    bool AddCoord( const SGPOINT& aPoint );\n"

#. type: delimited block -
#: plugins.adoc:1439
#, no-wrap
msgid ""
"    /* the following functions make no sense within a\n"
"       coords node and always return a failure code\n"
msgstr ""
"    /* 以下の関数は coords ノードでは意味がありません。\n"
"       また、常に失敗を表すコードを返します。\n"

#. type: Plain text
#: plugins.adoc:1453
msgid ""
"`IFSG_COORDINDEX` is similar to a VRML2.0 coordIdx[] set except it must "
"exclusively describe triangular faces, which implies that the total number of "
"indices is divisible by 3."
msgstr ""
"`IFSG_COORDINDEX` は三角形の面のみを記述しなければならない点を除いて VRML2.0 "
"coordIdx[] set と同等です。これは座標値の合計数が３で割り切れることを意味していま"
"す。"

#. type: Block title
#: plugins.adoc:1454
#, no-wrap
msgid "ifsg_coordindex.h"
msgstr "ifsg_coordindex.h"

#. type: delimited block -
#: plugins.adoc:1461
#, no-wrap
msgid ""
"/**\n"
" * Class IFSG_COORDINDEX\n"
" * is the wrapper for SGCOORDINDEX\n"
" */\n"
msgstr ""
"/**\n"
" * IFSG_COORDINDEX クラス\n"
" * SGCOORDINDEX のラッパー\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1468
#, no-wrap
msgid ""
"class IFSG_COORDINDEX : public IFSG_INDEX\n"
"{\n"
"public:\n"
"    IFSG_COORDINDEX( bool create );\n"
"    IFSG_COORDINDEX( SGNODE* aParent );\n"
"    IFSG_COORDINDEX( IFSG_NODE& aParent );\n"
msgstr ""
"class IFSG_COORDINDEX : public IFSG_INDEX\n"
"{\n"
"public:\n"
"    IFSG_COORDINDEX( bool create );\n"
"    IFSG_COORDINDEX( SGNODE* aParent );\n"
"    IFSG_COORDINDEX( IFSG_NODE& aParent );\n"

#. type: delimited block -
#: plugins.adoc:1472
#, no-wrap
msgid ""
"    bool GetIndices( size_t& nIndices, int*& aIndexList );\n"
"    bool SetIndices( size_t nIndices, int* aIndexList );\n"
"    bool AddIndex( int aIndex );\n"
msgstr ""
"    bool GetIndices( size_t& nIndices, int*& aIndexList );\n"
"    bool SetIndices( size_t nIndices, int* aIndexList );\n"
"    bool AddIndex( int aIndex );\n"

#. type: delimited block -
#: plugins.adoc:1477
#, no-wrap
msgid ""
"    /* the following functions make no sense within a\n"
"       coordindex node and always return a failure code\n"
msgstr ""
"    /* 以下の関数は coordindex ノードでは意味がありません。\n"
"       また、常に失敗を表すコードを返します。\n"

#. type: Plain text
#: plugins.adoc:1488
msgid "`IFSG_NORMALS` is equivalent to a VRML2.0 Normals node."
msgstr "`IFSG_NORMALS` は VRML2.0 Normals ノードと同等です。"

#. type: Block title
#: plugins.adoc:1489
#, no-wrap
msgid "ifsg_normals.h"
msgstr "ifsg_normals.h"

#. type: delimited block -
#: plugins.adoc:1496
#, no-wrap
msgid ""
"/**\n"
" * Class IFSG_NORMALS\n"
" * is the wrapper for the SGNORMALS class\n"
" */\n"
msgstr ""
"/**\n"
" * IFSG_NORMALS クラス\n"
" * SGNORMALS クラスのラッパー\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1503
#, no-wrap
msgid ""
"class IFSG_NORMALS : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_NORMALS( bool create );\n"
"    IFSG_NORMALS( SGNODE* aParent );\n"
"    IFSG_NORMALS( IFSG_NODE& aParent );\n"
msgstr ""
"class IFSG_NORMALS : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_NORMALS( bool create );\n"
"    IFSG_NORMALS( SGNODE* aParent );\n"
"    IFSG_NORMALS( IFSG_NODE& aParent );\n"

#. type: delimited block -
#: plugins.adoc:1508
#, no-wrap
msgid ""
"    bool GetNormalList( size_t& aListSize, SGVECTOR*& aNormalList );\n"
"    bool SetNormalList( size_t aListSize, const SGVECTOR* aNormalList );\n"
"    bool AddNormal( double aXValue, double aYValue, double aZValue );\n"
"    bool AddNormal( const SGVECTOR& aNormal );\n"
msgstr ""
"    bool GetNormalList( size_t& aListSize, SGVECTOR*& aNormalList );\n"
"    bool SetNormalList( size_t aListSize, const SGVECTOR* aNormalList );\n"
"    bool AddNormal( double aXValue, double aYValue, double aZValue );\n"
"    bool AddNormal( const SGVECTOR& aNormal );\n"

#. type: delimited block -
#: plugins.adoc:1513 plugins.adoc:1548
#, no-wrap
msgid ""
"    /* the following functions make no sense within a\n"
"       normals node and always return a failure code\n"
msgstr ""
"    /* 以下の関数は normals ノードでは意味がありません。\n"
"       また、常に失敗を表すコードを返します。\n"

#. type: Plain text
#: plugins.adoc:1523
msgid "`IFSG_COLORS` is similar to a VRML2.0 colors[] set."
msgstr "`IFSG_COLORS` は VRML2.0 colors[] set と同等です。"

#. type: Block title
#: plugins.adoc:1524
#, no-wrap
msgid "ifsg_colors.h"
msgstr "ifsg_colors.h"

#. type: delimited block -
#: plugins.adoc:1531
#, no-wrap
msgid ""
"/**\n"
" * Class IFSG_COLORS\n"
" * is the wrapper for SGCOLORS\n"
" */\n"
msgstr ""
"/**\n"
" * IFSG_COLORS クラス\n"
" * SGCOLORS のラッパー\n"
" */\n"

#. type: delimited block -
#: plugins.adoc:1538
#, no-wrap
msgid ""
"class IFSG_COLORS : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_COLORS( bool create );\n"
"    IFSG_COLORS( SGNODE* aParent );\n"
"    IFSG_COLORS( IFSG_NODE& aParent );\n"
msgstr ""
"class IFSG_COLORS : public IFSG_NODE\n"
"{\n"
"public:\n"
"    IFSG_COLORS( bool create );\n"
"    IFSG_COLORS( SGNODE* aParent );\n"
"    IFSG_COLORS( IFSG_NODE& aParent );\n"

#. type: delimited block -
#: plugins.adoc:1543
#, no-wrap
msgid ""
"    bool GetColorList( size_t& aListSize, SGCOLOR*& aColorList );\n"
"    bool SetColorList( size_t aListSize, const SGCOLOR* aColorList );\n"
"    bool AddColor( double aRedValue, double aGreenValue, double aBlueValue );\n"
"    bool AddColor( const SGCOLOR& aColor );\n"
msgstr ""
"    bool GetColorList( size_t& aListSize, SGCOLOR*& aColorList );\n"
"    bool SetColorList( size_t aListSize, const SGCOLOR* aColorList );\n"
"    bool AddColor( double aRedValue, double aGreenValue, double aBlueValue );\n"
"    bool AddColor( const SGCOLOR& aColor );\n"

#. type: Plain text
#: plugins.adoc:1559
msgid "The remaining API functions are defined in `ifsg_api.h` as follows:"
msgstr "残りの API 関数は、以下のように `ifsg_api.h` で定義されています:"

#. type: Block title
#: plugins.adoc:1560
#, no-wrap
msgid "ifsg_api.h"
msgstr "ifsg_api.h"

#. type: delimited block -
#: plugins.adoc:1571
#, no-wrap
msgid ""
"namespace S3D\n"
"{\n"
"    /**\n"
"     * Function GetLibVersion retrieves version information of the\n"
"     * kicad_3dsg library\n"
"     */\n"
"    SGLIB_API void GetLibVersion( unsigned char* Major, unsigned char* Minor,\n"
"                                  unsigned char* Patch, unsigned char* Revision );\n"
msgstr ""
"namespace S3D\n"
"{\n"
"    /**\n"
"     * GetLibVersion 関数は、kicad_3dsg library の\n"
"     * バージョン情報を取得する\n"
"     */\n"
"    SGLIB_API void GetLibVersion( unsigned char* Major, unsigned char* Minor,\n"
"                                  unsigned char* Patch, unsigned char* Revision );\n"

#. type: delimited block -
#: plugins.adoc:1578
#, no-wrap
msgid ""
"    // functions to extract information from SGNODE pointers\n"
"    SGLIB_API S3D::SGTYPES GetSGNodeType( SGNODE* aNode );\n"
"    SGLIB_API SGNODE* GetSGNodeParent( SGNODE* aNode );\n"
"    SGLIB_API bool AddSGNodeRef( SGNODE* aParent, SGNODE* aChild );\n"
"    SGLIB_API bool AddSGNodeChild( SGNODE* aParent, SGNODE* aChild );\n"
"    SGLIB_API void AssociateSGNodeWrapper( SGNODE* aObject, SGNODE** aRefPtr );\n"
msgstr ""
"    // SGNODE ポインタから情報を得るための関数\n"
"    SGLIB_API S3D::SGTYPES GetSGNodeType( SGNODE* aNode );\n"
"    SGLIB_API SGNODE* GetSGNodeParent( SGNODE* aNode );\n"
"    SGLIB_API bool AddSGNodeRef( SGNODE* aParent, SGNODE* aChild );\n"
"    SGLIB_API bool AddSGNodeChild( SGNODE* aParent, SGNODE* aChild );\n"
"    SGLIB_API void AssociateSGNodeWrapper( SGNODE* aObject, SGNODE** aRefPtr );\n"

#. type: delimited block -
#: plugins.adoc:1584
#, no-wrap
msgid ""
"    /**\n"
"     * Function CalcTriNorm\n"
"     * returns the normal vector of a triangle described by vertices p1, p2, p3\n"
"     */\n"
"    SGLIB_API SGVECTOR CalcTriNorm( const SGPOINT& p1, const SGPOINT& p2, const SGPOINT& p3 );\n"
msgstr ""
"    /**\n"
"     * CalcTriNorm 関数\n"
"     * 頂点 p1, p2, p3 で表される三角形の法線ベクトルを返す\n"
"     */\n"
"    SGLIB_API SGVECTOR CalcTriNorm( const SGPOINT& p1, const SGPOINT& p2, const SGPOINT& p3 );\n"

#. type: delimited block -
#: plugins.adoc:1596
#, no-wrap
msgid ""
"    /**\n"
"     * Function WriteCache\n"
"     * writes the SGNODE tree to a binary cache file\n"
"     *\n"
"     * @param aFileName is the name of the file to write\n"
"     * @param overwrite must be set to true to overwrite an existing file\n"
"     * @param aNode is any node within the node tree which is to be written\n"
"     * @return true on success\n"
"     */\n"
"    SGLIB_API bool WriteCache( const char* aFileName, bool overwrite, SGNODE* aNode,\n"
"        const char* aPluginInfo );\n"
msgstr ""
"    /**\n"
"     * WriteCache 関数\n"
"     * バイナリ キャッシュ ファイルへ SGNODE ツリーを書き込む\n"
"     *\n"
"     * @param aFileName 書き込まれるファイル名\n"
"     * @param overwrite 既存のファイルへ上書きするためには true をセットしなければならない\n"
"     * @param aNode 書き込まれるノード ツリー内にあるノードのいずれか\n"
"     * @return 成功した場合は true\n"
"     */\n"
"    SGLIB_API bool WriteCache( const char* aFileName, bool overwrite, SGNODE* aNode,\n"
"        const char* aPluginInfo );\n"

#. type: delimited block -
#: plugins.adoc:1608
#, no-wrap
msgid ""
"    /**\n"
"     * Function ReadCache\n"
"     * reads a binary cache file and creates an SGNODE tree\n"
"     *\n"
"     * @param aFileName is the name of the binary cache file to be read\n"
"     * @return NULL on failure, on success a pointer to the top level SCENEGRAPH node;\n"
"     * if desired this node can be associated with an IFSG_TRANSFORM wrapper via\n"
"     * the IFSG_TRANSFORM::Attach() function.\n"
"     */\n"
"    SGLIB_API SGNODE* ReadCache( const char* aFileName, void* aPluginMgr,\n"
"        bool (*aTagCheck)( const char*, void* ) );\n"
msgstr ""
"    /**\n"
"     * ReadCache 関数\n"
"     * バイナリ キャッシュ ファイルを読み込み、SGNODE ツリーを作成する\n"
"     *\n"
"     * @param aFileName 読み込まれるバイナリ キャッシュ ファイル名\n"
"     * @return 失敗した場合は NULL、成功した場合はトップ レベル SCENEGRAPH ノードへのポインタ;\n"
"     * 必要なら、このノードを IFSG_TRANSFORM::Attach() 関数経由で\n"
"     * IFSG_TRANSFORM ラッパーと関連付けることも可能\n"
"     */\n"
"    SGLIB_API SGNODE* ReadCache( const char* aFileName, void* aPluginMgr,\n"
"        bool (*aTagCheck)( const char*, void* ) );\n"

#. type: delimited block -
#: plugins.adoc:1621
#, no-wrap
msgid ""
"    /**\n"
"     * Function WriteVRML\n"
"     * writes out the given node and its subnodes to a VRML2 file\n"
"     *\n"
"     * @param filename is the name of the output file\n"
"     * @param overwrite should be set to true to overwrite an existing VRML file\n"
"     * @param aTopNode is a pointer to a SCENEGRAPH object representing the VRML scene\n"
"     * @param reuse should be set to true to make use of VRML DEF/USE features\n"
"     * @return true on success\n"
"     */\n"
"    SGLIB_API bool WriteVRML( const char* filename, bool overwrite, SGNODE* aTopNode,\n"
"                    bool reuse, bool renameNodes );\n"
msgstr ""
"    /**\n"
"     * WriteVRML 関数\n"
"     * VRML2 ファイルへ与えられたノードとそのサブノートを書き込む\n"
"     *\n"
"     * @param filename 出力ファイル名\n"
"     * @param overwrite 既存の VRML ファイルへ上書きするためには true をセットしなければならない\n"
"     * @param aTopNode VRML シーンで表される SCENEGRAPH オブジェクトへのポインタ\n"
"     * @param reuse VRML DEF/USE 機能を使用する場合には true をセットしなければならない\n"
"     * @return 成功した場合は true\n"
"     */\n"
"    SGLIB_API bool WriteVRML( const char* filename, bool overwrite, SGNODE* aTopNode,\n"
"                    bool reuse, bool renameNodes );\n"

#. type: delimited block -
#: plugins.adoc:1645
#, no-wrap
msgid ""
"    // NOTE: The following functions are used in combination to create a VRML\n"
"    // assembly which may use various instances of each SG* representation of a module.\n"
"    // A typical use case would be:\n"
"    // 1. invoke 'ResetNodeIndex()' to reset the global node name indices\n"
"    // 2. for each model pointer provided by 'S3DCACHE->Load()', invoke 'RenameNodes()' once;\n"
"    //    this ensures that all nodes have a unique name to present to the final output file.\n"
"    //    Internally, RenameNodes() will only rename the given node and all Child subnodes;\n"
"    //    nodes which are only referenced will not be renamed. Using the pointer supplied\n"
"    //    by 'S3DCACHE->Load()' ensures that all nodes but the returned node (top node) are\n"
"    //    children of at least one node, so all nodes are given unique names.\n"
"    // 3. if SG* trees are created independently of S3DCACHE->Load() the user must invoke\n"
"    //    RenameNodes() as appropriate to ensure that all nodes have a unique name\n"
"    // 4. create an assembly structure by creating new IFSG_TRANSFORM nodes as appropriate\n"
"    //    for each instance of a component; the component base model as returned by\n"
"    //    S3DCACHE->Load() may be added to these IFSG_TRANSFORM nodes via 'AddRefNode()';\n"
"    //    set the offset, rotation, etc of the IFSG_TRANSFORM node to ensure correct\n"
"    // 5. Ensure that all new IFSG_TRANSFORM nodes are placed as child nodes within a\n"
"    //    top level IFSG_TRANSFORM node in preparation for final node naming and output\n"
"    // 6. Invoke RenameNodes() on the top level assembly node\n"
"    // 7. Invoke WriteVRML() as normal, with renameNodes = false, to write the entire assembly\n"
"    //    structure to a single VRML file\n"
"    // 8. Clean up by deleting any extra IFSG_TRANSFORM wrappers and their underlying SG*\n"
"    //    classes which have been created solely for the assembly output\n"
msgstr ""
"    // 注記: 以下の関数は、モジュールの各 SG* 表現のいろいろなインスタンスで用いられる\n"
"    //  VRML アセンブリの作成とともに使用されます。\n"
"    // 典型的な使用例:\n"
"    // 1. グローバル ノード名のインデックスをリセットするために 'ResetNodeIndex()' を呼ぶ \n"
"    // 2. 'S3DCACHE->Load()' で得られた各モデルのポインタに対して、一度 'RenameNodes()' を呼ぶ;\n"
"    //    これにより、全てのノードが最終的な出力ファイルで一意的な名前を持つことが保証されます\n"
"    //    内部的には、RenameNodes() は与えられたノードと全ての子サブノートをリネームするだけです;\n"
"    //    参照されているだけのノードはリネームされないでしょう。'S3DCACHE->Load()' で得られた\n"
"    //    ポインタを使うことで、返ってくるノード (トップ ノード) 以外の全てのノードが少なくとも1つのノードの\n"
"    //    子供であることが保証されます。このため、全てのノードは一意的な名前を与えられることになります\n"
"    // 3. もし SG* ツリーが S3DCACHE->Load() とは無関係に作られたなら、ユーザーは全てのノードが\n"
"    //    一意的な名前を持つことを保証できるよう適宜 RenameNodes() を呼ばなければなりません\n"
"    // 4. コンポーネントの各インスタンスに対して適切な IFSG_TRANSFORM ノードを新たに作成し、\n"
"    //    アセンブリ構造体を作成します; S3DCACHE->Load() が返すコンポーネント ベース モデルは\n"
"    //    'AddRefNode()' 経由でこれらの IFSG_TRANSFORM ノードを追加するかも知れません;\n"
"    //    正確さを保証するために IFSG_TRANSFORM ノードのオフセット、回転角などをセットします\n"
"    // 5. 最終的にノード名を決定して出力するための準備として、全ての新規 IFSG_TRANSFORM ノードが\n"
"    //     トップ レベル IFSG_TRANSFORM ノード内で子ノードとして配置されていることを確認します\n"
"    // 6. トップ レベル アセンブリ ノード上で RenameNodes() を呼ぶ\n"
"    // 7. 一つの VRML ファイルに全てのアセンブリ構造体を書き込むために、\n"
"    //    renameNodes = false として、WriteVRML() を呼ぶ\n"
"    // 8. アセンブリ出力のためにだけ作られた全ての追加 IFSG_TRANSFORM ラッパーとそれらの下層 SG* \n"
"    //    クラスを削除して後始末を行う\n"

#. type: delimited block -
#: plugins.adoc:1653
#, no-wrap
msgid ""
"    /**\n"
"     * Function ResetNodeIndex\n"
"     * resets the global SG* class indices\n"
"     *\n"
"     * @param aNode may be any valid SGNODE\n"
"     */\n"
"    SGLIB_API void ResetNodeIndex( SGNODE* aNode );\n"
msgstr ""
"    /**\n"
"     * ResetNodeIndex 関数\n"
"     * グローバル SG* クラス 値をリセットする\n"
"     *\n"
"     * @param aNode 有効な SGNODE のいずれか\n"
"     */\n"
"    SGLIB_API void ResetNodeIndex( SGNODE* aNode );\n"

#. type: delimited block -
#: plugins.adoc:1662
#, no-wrap
msgid ""
"    /**\n"
"     * Function RenameNodes\n"
"     * renames a node and all children nodes based on the current\n"
"     * values of the global SG* class indices\n"
"     *\n"
"     * @param aNode is a top level node\n"
"     */\n"
"    SGLIB_API void RenameNodes( SGNODE* aNode );\n"
msgstr ""
"    /**\n"
"     * RenameNodes 関数\n"
"     * 現在のグローバル SG* クラス値を基にノードと\n"
"     * 全ての子ノードをリネームする\n"
"     *\n"
"     * @param aNode トップ レベル ノード\n"
"     */\n"
"    SGLIB_API void RenameNodes( SGNODE* aNode );\n"

#. type: delimited block -
#: plugins.adoc:1670
#, no-wrap
msgid ""
"    /**\n"
"     * Function DestroyNode\n"
"     * deletes the given SG* class node. This function makes it possible\n"
"     * to safely delete an SG* node without associating the node with\n"
"     * its corresponding IFSG* wrapper.\n"
"     */\n"
"    SGLIB_API void DestroyNode( SGNODE* aNode );\n"
msgstr ""
"    /**\n"
"     * DestroyNode 関数\n"
"     * 与えられた SG* クラス ノードを削除する。この関数は、対応した IFSG* \n"
"     * ラッパーに関連付けられたノード以外の SG* ノードを安全に削除すること\n"
"     * を可能にします。\n"
"     */\n"
"    SGLIB_API void DestroyNode( SGNODE* aNode );\n"

#. type: delimited block -
#: plugins.adoc:1673
#, no-wrap
msgid ""
"    // NOTE: The following functions facilitate the creation and destruction\n"
"    // of data structures for rendering\n"
msgstr ""
"    // 注記: 以下の関数は、レンダリング時のデータ構造の生成と破棄を\n"
"    // 容易にするためのものです。\n"

#. type: delimited block -
#: plugins.adoc:1682
#, no-wrap
msgid ""
"    /**\n"
"     * Function GetModel\n"
"     * creates an S3DMODEL representation of aNode (raw data, no transforms)\n"
"     *\n"
"     * @param aNode is the node to be transcribed into an S3DMODEL representation\n"
"     * @return an S3DMODEL representation of aNode on success, otherwise NULL\n"
"     */\n"
"    SGLIB_API S3DMODEL* GetModel( SCENEGRAPH* aNode );\n"
msgstr ""
"    /**\n"
"     * GetModel 関数\n"
"     * aNode (raw data, no transforms) の S3DMODEL 表現を作成する\n"
"     *\n"
"     * @param aNode S3DMODEL 表現へと変換されるノード\n"
"     * @return 成功した場合は aNode の S3DMODEL 表現、それ以外は NULL\n"
"     */\n"
"    SGLIB_API S3DMODEL* GetModel( SCENEGRAPH* aNode );\n"

#. type: delimited block -
#: plugins.adoc:1689
#, no-wrap
msgid ""
"    /**\n"
"     * Function Destroy3DModel\n"
"     * frees memory used by an S3DMODEL structure and sets the pointer to\n"
"     * the structure to NULL\n"
"     */\n"
"    SGLIB_API void Destroy3DModel( S3DMODEL** aModel );\n"
msgstr ""
"    /**\n"
"     * Destroy3DModel 関数\n"
"     * S3DMODEL 構造体で使われていたメモリを開放し、構造体へのポインタに\n"
"     * NULL をセットする\n"
"     */\n"
"    SGLIB_API void Destroy3DModel( S3DMODEL** aModel );\n"

#. type: delimited block -
#: plugins.adoc:1695
#, no-wrap
msgid ""
"    /**\n"
"     * Function Free3DModel\n"
"     * frees memory used internally by an S3DMODEL structure\n"
"     */\n"
"    SGLIB_API void Free3DModel( S3DMODEL& aModel );\n"
msgstr ""
"    /**\n"
"     * Free3DModel 関数\n"
"     * S3DMODEL 構造体で内部的に使われていたメモリを開放する\n"
"     */\n"
"    SGLIB_API void Free3DModel( S3DMODEL& aModel );\n"

#. type: delimited block -
#: plugins.adoc:1701
#, no-wrap
msgid ""
"    /**\n"
"     * Function Free3DMesh\n"
"     * frees memory used internally by an SMESH structure\n"
"     */\n"
"    SGLIB_API void Free3DMesh( SMESH& aMesh );\n"
msgstr ""
"    /**\n"
"     * Free3DMesh 関数\n"
"     * SMESH 構造体で内部的に使われていたメモリを開放する\n"
"     */\n"
"    SGLIB_API void Free3DMesh( SMESH& aMesh );\n"

#. type: delimited block -
#: plugins.adoc:1707
#, no-wrap
msgid ""
"    /**\n"
"     * Function New3DModel\n"
"     * creates and initializes an S3DMODEL struct\n"
"     */\n"
"    SGLIB_API S3DMODEL* New3DModel( void );\n"
msgstr ""
"    /**\n"
"     * New3DModel 関数\n"
"     * S3DMODEL 構造体を作成して初期化する\n"
"     */\n"
"    SGLIB_API S3DMODEL* New3DModel( void );\n"

#. type: delimited block -
#: plugins.adoc:1713
#, no-wrap
msgid ""
"    /**\n"
"     * Function Init3DMaterial\n"
"     * initializes an SMATERIAL struct\n"
"     */\n"
"    SGLIB_API void Init3DMaterial( SMATERIAL& aMat );\n"
msgstr ""
"    /**\n"
"     * Init3DMaterial 関数\n"
"     * SMATERIAL 構造体を初期化する\n"
"     */\n"
"    SGLIB_API void Init3DMaterial( SMATERIAL& aMat );\n"

#. type: delimited block -
#: plugins.adoc:1720
#, no-wrap
msgid ""
"    /**\n"
"     * Function Init3DMesh\n"
"     * creates and initializes an SMESH struct\n"
"     */\n"
"    SGLIB_API void Init3DMesh( SMESH& aMesh );\n"
"};\n"
msgstr ""
"    /**\n"
"     * Init3DMesh 関数\n"
"     * SMESH 構造体を作成して初期化する\n"
"     */\n"
"    SGLIB_API void Init3DMesh( SMESH& aMesh );\n"
"};\n"

#. type: Plain text
#: plugins.adoc:1724
msgid ""
"For actual usage examples of the Scenegraph API see the <<advanced-3d-plugin,"
"Advanced 3D Plugin tutorial>> above and the KiCad VRML1, VRML2, and X3D parsers."
msgstr ""
"シーングラフ API の実際の使用例は、<<advanced-3d-plugin,Advanced 3D Plugin "
"tutorial>> の記述と KiCad VRML1, VRML2, X3D パーサーを参照のこと。"
