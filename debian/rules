#!/usr/bin/make -f
#export DH_VERBOSE=1

export DEB_BUILD_MAINT_OPTIONS = hardening=+all
DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk

# out of tree build folder for kicad application
DEB_BUILD_DIR=debian/build
# default install folder
INSTDIR=$(CURDIR)/debian/tmp
# catching make jobs from DEB_BUILD_OPTIONS
PARALLEL_BUILD=$(echo $DEB_BUILD_OPTIONS | sed -e '/parallel=/!s/.*/1/;s/.*parallel=\([0-9]\+\).*/\1/g')

# other variables
VERSION  = $(shell basename $$(pwd)| sed 's/kicad-//')
DATE     = $(shell date +'%Y-%m-%d' -d"`dpkg-parsechangelog -SDate`")

DEB_KICAD_CMAKE_OPTS := \
	-DKICAD_SKIP_BOOST=ON \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DCMAKE_CXX_FLAGS="$(CXXFLAGS)" \
	-DCMAKE_SHARED_LINKER_FLAGS_RELEASE="$(LDFLAGS)" \
	-DBUILD_GITHUB_PLUGIN=ON \
	-DKICAD_REPO_NAME=stable \
	-DKICAD_BUILD_VERSION=$(VERSION) \
	-DDEFAULT_INSTALL_PATH=/usr \
	-DKICAD_SCRIPTING=ON \
	-DKICAD_SCRIPTING_MODULES=ON \
	-DKICAD_SCRIPTING_WXPYTHON=ON \
	$(NULL)

DEB_DOC_CMAKE_OPTS := \
	-DCMAKE_INSTALL_PREFIX=/usr \
	$(NULL)

DEB_I18N_CMAKE_OPTS := \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DKICAD_I18N_UNIX_STRICT_PATH=ON \
	$(NULL)

DEB_LIBRARIES_CMAKE_OPTS := \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DCMAKE_CXX_FLAGS="$(CXXFLAGS)" \
	-DCMAKE_SHARED_LINKER_FLAGS_RELEASE="$(LDFLAGS)" \
	$(NULL)

%:
	dh $@ --with-python2 --parallel

override_dh_auto_configure:
	mkdir -p $(DEB_BUILD_DIR)
	# configuring KiCad application
	dh_auto_configure --sourcedirectory=$(CURDIR) --builddirectory=$(DEB_BUILD_DIR) -- $(DEB_KICAD_CMAKE_OPTS)
	# configuring KiCad documentation
	dh_auto_configure --sourcedirectory=$(CURDIR)/doc --builddirectory=$(DEB_BUILD_DIR)/doc -- $(DEB_DOC_CMAKE_OPTS)
	# configuring KiCad i18n files
	dh_auto_configure --sourcedirectory=$(CURDIR)/i18n --builddirectory=$(DEB_BUILD_DIR)/i18n -- $(DEB_I18N_CMAKE_OPTS)
	# configuring KiCad libraries
	dh_auto_configure --sourcedirectory=$(CURDIR)/libraries/kicad-library --builddirectory=$(DEB_BUILD_DIR)/libraries -- $(DEB_LIBRARIES_CMAKE_OPTS)

override_dh_auto_build-arch:
	# The other parts of KiCad like documentation, i18n files and the
	# libraries don't need to be build as arch depended, they even
	# don't need to be prebuild before calling dh_install. So ignoring
	# here. Only build the KiCad application here.
	dh_auto_build --parallel --sourcedirectory=$(CURDIR) --builddirectory=$(DEB_BUILD_DIR)

override_dh_auto_install:
	# installing KiCad application
	dh_auto_install --destdir=$(INSTDIR) --sourcedirectory=$(CURDIR) --builddirectory=$(DEB_BUILD_DIR)
	# building and installing KiCad documentation
	dh_auto_install --destdir=$(INSTDIR) --sourcedirectory=$(CURDIR)/doc --builddirectory=$(DEB_BUILD_DIR)/doc
	# installing KiCad i18n files
	dh_auto_install --destdir=$(INSTDIR) --sourcedirectory=$(CURDIR)/i18n --builddirectory=$(DEB_BUILD_DIR)/i18n
	# install KiCad libraries
	dh_auto_install --destdir=$(INSTDIR) --sourcedirectory=$(CURDIR)/libraries/kicad-library --builddirectory=$(DEB_BUILD_DIR)/libraries
	# some tweaks before running the next dh sequencers
	# fixing icon sizes
	images=$$(find $(INSTDIR)/usr/share/icons/hicolor/48x48 -name "*.png"); \
	for f in $$images; do \
		size=$$(identify $$f | sed -n 's/.* PNG \(4[^ ]*\) .*/\1/ p'); \
		if [ "$$size" != "48x48" ]; then \
			echo "Resize $$(basename $$f) : $$size => 48x48"; \
			convert -resize '48x48!' $$f $$f.tmp && mv $$f.tmp $$f; \
		fi; \
	done
	# The kicad XPM icon comes with a to high resolution, fixing before install.
	convert -resize '32x32!' $(CURDIR)/bitmaps_png/icons/icon_kicad.xpm $(CURDIR)/bitmaps_png/icons/kicad.xpm
	# remove the cvpcb desktop, it's history
	rm $(INSTDIR)/usr/share/applications/cvpcb.desktop

override_dh_install:
	dh_install
	dh_python2

override_dh_fixperms:
	dh_fixperms
	# most of those file are included from somethere and have no shebang
	# like a #! sequence, removing execution rights ...
	chmod -x $(CURDIR)/debian/kicad-common/usr/share/kicad/scripting/plugins/*.py
	# ... except this file which has a #! sequence
	chmod +x $(CURDIR)/debian/kicad-common/usr/share/kicad/scripting/plugins/touch_slider_wizard.py
	# strip unneeded symbols from the kicad specific libraries in /usr/lib/kicad/
	strip --strip-unneeded --remove-section=.comment $(CURDIR)/debian/kicad/usr/lib/kicad/_*.kiface
